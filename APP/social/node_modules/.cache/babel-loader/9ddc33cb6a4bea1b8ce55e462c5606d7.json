{"ast":null,"code":"import { useRef, useEffect } from 'react';\n/**\n * A setTimeout hook that calls a callback after a timeout duration\n * when a condition is true\n *\n * @param cb The callback to be invoked after timeout\n * @param timeoutDelayMs Amount of time in ms after which to invoke\n * @param when The condition which when true, sets the timeout\n */\n\nfunction useTimeoutWhen(callback_, timeoutDelayMs, when) {\n  if (timeoutDelayMs === void 0) {\n    timeoutDelayMs = 0;\n  }\n\n  if (when === void 0) {\n    when = true;\n  }\n\n  var savedRefCallback = useRef();\n  useEffect(function () {\n    savedRefCallback.current = callback_;\n  });\n\n  function callback() {\n    savedRefCallback.current && savedRefCallback.current();\n  }\n\n  useEffect(function () {\n    if (when) {\n      var timeout_1 = window.setTimeout(callback, timeoutDelayMs);\n      return function () {\n        window.clearTimeout(timeout_1);\n      };\n    }\n  }, [when]);\n}\n\nexport { useTimeoutWhen };","map":{"version":3,"sources":["D:/react/productwebsite/node_modules/rooks/dist/esm/hooks/useTimeoutWhen.js"],"names":["useRef","useEffect","useTimeoutWhen","callback_","timeoutDelayMs","when","savedRefCallback","current","callback","timeout_1","window","setTimeout","clearTimeout"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,cAAnC,EAAmDC,IAAnD,EAAyD;AACrD,MAAID,cAAc,KAAK,KAAK,CAA5B,EAA+B;AAAEA,IAAAA,cAAc,GAAG,CAAjB;AAAqB;;AACtD,MAAIC,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,IAAP;AAAc;;AACrC,MAAIC,gBAAgB,GAAGN,MAAM,EAA7B;AACAC,EAAAA,SAAS,CAAC,YAAY;AAClBK,IAAAA,gBAAgB,CAACC,OAAjB,GAA2BJ,SAA3B;AACH,GAFQ,CAAT;;AAGA,WAASK,QAAT,GAAoB;AAChBF,IAAAA,gBAAgB,CAACC,OAAjB,IAA4BD,gBAAgB,CAACC,OAAjB,EAA5B;AACH;;AACDN,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAII,IAAJ,EAAU;AACN,UAAII,SAAS,GAAGC,MAAM,CAACC,UAAP,CAAkBH,QAAlB,EAA4BJ,cAA5B,CAAhB;AACA,aAAO,YAAY;AACfM,QAAAA,MAAM,CAACE,YAAP,CAAoBH,SAApB;AACH,OAFD;AAGH;AACJ,GAPQ,EAON,CAACJ,IAAD,CAPM,CAAT;AAQH;;AACD,SAASH,cAAT","sourcesContent":["import { useRef, useEffect } from 'react';\n/**\n * A setTimeout hook that calls a callback after a timeout duration\n * when a condition is true\n *\n * @param cb The callback to be invoked after timeout\n * @param timeoutDelayMs Amount of time in ms after which to invoke\n * @param when The condition which when true, sets the timeout\n */\nfunction useTimeoutWhen(callback_, timeoutDelayMs, when) {\n    if (timeoutDelayMs === void 0) { timeoutDelayMs = 0; }\n    if (when === void 0) { when = true; }\n    var savedRefCallback = useRef();\n    useEffect(function () {\n        savedRefCallback.current = callback_;\n    });\n    function callback() {\n        savedRefCallback.current && savedRefCallback.current();\n    }\n    useEffect(function () {\n        if (when) {\n            var timeout_1 = window.setTimeout(callback, timeoutDelayMs);\n            return function () {\n                window.clearTimeout(timeout_1);\n            };\n        }\n    }, [when]);\n}\nexport { useTimeoutWhen };\n"]},"metadata":{},"sourceType":"module"}