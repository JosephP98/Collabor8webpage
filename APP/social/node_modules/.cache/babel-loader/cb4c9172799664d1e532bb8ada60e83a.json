{"ast":null,"code":"import { useState, useEffect, useCallback, useRef } from 'react';\n/**\n * useThrottle\n * Throttles a function with a timeout and ensures\n * that the callback function runs at most once in that duration\n *\n * @param fn The callback to throttle\n * @param timeout Throttle timeout\n */\n\nfunction useThrottle(function_, timeout) {\n  if (timeout === void 0) {\n    timeout = 300;\n  }\n\n  var _a = useState(true),\n      ready = _a[0],\n      setReady = _a[1];\n\n  var timerRef = useRef(undefined);\n\n  if (!function_ || typeof function_ !== 'function') {\n    throw new Error('As a first argument, you need to pass a function to useThrottle hook.');\n  }\n\n  var throttledFunction = useCallback(function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!ready) {\n      return;\n    }\n\n    setReady(false);\n    function_.apply(void 0, args);\n  }, [ready, function_]);\n  useEffect(function () {\n    if (!ready) {\n      timerRef.current = window.setTimeout(function () {\n        setReady(true);\n      }, timeout);\n      return function () {\n        return window.clearTimeout(timerRef.current);\n      };\n    }\n  }, [ready, timeout]);\n  return [throttledFunction, ready];\n}\n\nexport { useThrottle };","map":{"version":3,"sources":["D:/react/productwebsite/node_modules/rooks/dist/esm/hooks/useThrottle.js"],"names":["useState","useEffect","useCallback","useRef","useThrottle","function_","timeout","_a","ready","setReady","timerRef","undefined","Error","throttledFunction","args","_i","arguments","length","apply","current","window","setTimeout","clearTimeout"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,EAA2CC,MAA3C,QAAyD,OAAzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,OAAhC,EAAyC;AACrC,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,GAAV;AAAgB;;AAC1C,MAAIC,EAAE,GAAGP,QAAQ,CAAC,IAAD,CAAjB;AAAA,MAAyBQ,KAAK,GAAGD,EAAE,CAAC,CAAD,CAAnC;AAAA,MAAwCE,QAAQ,GAAGF,EAAE,CAAC,CAAD,CAArD;;AACA,MAAIG,QAAQ,GAAGP,MAAM,CAACQ,SAAD,CAArB;;AACA,MAAI,CAACN,SAAD,IAAc,OAAOA,SAAP,KAAqB,UAAvC,EAAmD;AAC/C,UAAM,IAAIO,KAAJ,CAAU,uEAAV,CAAN;AACH;;AACD,MAAIC,iBAAiB,GAAGX,WAAW,CAAC,YAAY;AAC5C,QAAIY,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,MAAAA,IAAI,CAACC,EAAD,CAAJ,GAAWC,SAAS,CAACD,EAAD,CAApB;AACH;;AACD,QAAI,CAACP,KAAL,EAAY;AACR;AACH;;AACDC,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAJ,IAAAA,SAAS,CAACa,KAAV,CAAgB,KAAK,CAArB,EAAwBJ,IAAxB;AACH,GAVkC,EAUhC,CAACN,KAAD,EAAQH,SAAR,CAVgC,CAAnC;AAWAJ,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAI,CAACO,KAAL,EAAY;AACRE,MAAAA,QAAQ,CAACS,OAAT,GAAmBC,MAAM,CAACC,UAAP,CAAkB,YAAY;AAC7CZ,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAFkB,EAEhBH,OAFgB,CAAnB;AAGA,aAAO,YAAY;AAAE,eAAOc,MAAM,CAACE,YAAP,CAAoBZ,QAAQ,CAACS,OAA7B,CAAP;AAA+C,OAApE;AACH;AACJ,GAPQ,EAON,CAACX,KAAD,EAAQF,OAAR,CAPM,CAAT;AAQA,SAAO,CAACO,iBAAD,EAAoBL,KAApB,CAAP;AACH;;AACD,SAASJ,WAAT","sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\n/**\n * useThrottle\n * Throttles a function with a timeout and ensures\n * that the callback function runs at most once in that duration\n *\n * @param fn The callback to throttle\n * @param timeout Throttle timeout\n */\nfunction useThrottle(function_, timeout) {\n    if (timeout === void 0) { timeout = 300; }\n    var _a = useState(true), ready = _a[0], setReady = _a[1];\n    var timerRef = useRef(undefined);\n    if (!function_ || typeof function_ !== 'function') {\n        throw new Error('As a first argument, you need to pass a function to useThrottle hook.');\n    }\n    var throttledFunction = useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!ready) {\n            return;\n        }\n        setReady(false);\n        function_.apply(void 0, args);\n    }, [ready, function_]);\n    useEffect(function () {\n        if (!ready) {\n            timerRef.current = window.setTimeout(function () {\n                setReady(true);\n            }, timeout);\n            return function () { return window.clearTimeout(timerRef.current); };\n        }\n    }, [ready, timeout]);\n    return [throttledFunction, ready];\n}\nexport { useThrottle };\n"]},"metadata":{},"sourceType":"module"}