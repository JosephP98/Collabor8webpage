{"ast":null,"code":"import { useState } from 'react';\nimport { useIsomorphicEffect } from './useIsomorphicEffect';\nvar nullDimensions = {\n  innerHeight: null,\n  innerWidth: null,\n  outerHeight: null,\n  outerWidth: null\n};\n\nfunction getDimensions() {\n  return {\n    innerHeight: window.innerHeight,\n    innerWidth: window.innerWidth,\n    outerHeight: window.outerHeight,\n    outerWidth: window.outerWidth\n  };\n}\n/**\n * useWindowSize hook\n * A hook that provides information of the dimensions of the window\n *\n * @returns Dimensions of the window\n */\n\n\nexport function useWindowSize() {\n  var _a = useState(function () {\n    if (typeof window !== 'undefined') {\n      return getDimensions();\n    } else {\n      return nullDimensions;\n    }\n  }),\n      windowSize = _a[0],\n      setWindowSize = _a[1]; // set resize handler once on mount and clean before unmount\n\n\n  useIsomorphicEffect(function () {\n    function onResize() {\n      setWindowSize(getDimensions());\n    }\n\n    window.addEventListener('resize', onResize);\n    return function () {\n      window.removeEventListener('resize', onResize);\n    };\n  }, []);\n  return windowSize;\n}","map":{"version":3,"sources":["D:/react/productwebsite/node_modules/rooks/dist/esm/hooks/useWindowSize.js"],"names":["useState","useIsomorphicEffect","nullDimensions","innerHeight","innerWidth","outerHeight","outerWidth","getDimensions","window","useWindowSize","_a","windowSize","setWindowSize","onResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,IAAIC,cAAc,GAAG;AACjBC,EAAAA,WAAW,EAAE,IADI;AAEjBC,EAAAA,UAAU,EAAE,IAFK;AAGjBC,EAAAA,WAAW,EAAE,IAHI;AAIjBC,EAAAA,UAAU,EAAE;AAJK,CAArB;;AAMA,SAASC,aAAT,GAAyB;AACrB,SAAO;AACHJ,IAAAA,WAAW,EAAEK,MAAM,CAACL,WADjB;AAEHC,IAAAA,UAAU,EAAEI,MAAM,CAACJ,UAFhB;AAGHC,IAAAA,WAAW,EAAEG,MAAM,CAACH,WAHjB;AAIHC,IAAAA,UAAU,EAAEE,MAAM,CAACF;AAJhB,GAAP;AAMH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASG,aAAT,GAAyB;AAC5B,MAAIC,EAAE,GAAGV,QAAQ,CAAC,YAAY;AAC1B,QAAI,OAAOQ,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,aAAOD,aAAa,EAApB;AACH,KAFD,MAGK;AACD,aAAOL,cAAP;AACH;AACJ,GAPgB,CAAjB;AAAA,MAOIS,UAAU,GAAGD,EAAE,CAAC,CAAD,CAPnB;AAAA,MAOwBE,aAAa,GAAGF,EAAE,CAAC,CAAD,CAP1C,CAD4B,CAS5B;;;AACAT,EAAAA,mBAAmB,CAAC,YAAY;AAC5B,aAASY,QAAT,GAAoB;AAChBD,MAAAA,aAAa,CAACL,aAAa,EAAd,CAAb;AACH;;AACDC,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCD,QAAlC;AACA,WAAO,YAAY;AACfL,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCF,QAArC;AACH,KAFD;AAGH,GARkB,EAQhB,EARgB,CAAnB;AASA,SAAOF,UAAP;AACH","sourcesContent":["import { useState } from 'react';\nimport { useIsomorphicEffect } from './useIsomorphicEffect';\nvar nullDimensions = {\n    innerHeight: null,\n    innerWidth: null,\n    outerHeight: null,\n    outerWidth: null,\n};\nfunction getDimensions() {\n    return {\n        innerHeight: window.innerHeight,\n        innerWidth: window.innerWidth,\n        outerHeight: window.outerHeight,\n        outerWidth: window.outerWidth,\n    };\n}\n/**\n * useWindowSize hook\n * A hook that provides information of the dimensions of the window\n *\n * @returns Dimensions of the window\n */\nexport function useWindowSize() {\n    var _a = useState(function () {\n        if (typeof window !== 'undefined') {\n            return getDimensions();\n        }\n        else {\n            return nullDimensions;\n        }\n    }), windowSize = _a[0], setWindowSize = _a[1];\n    // set resize handler once on mount and clean before unmount\n    useIsomorphicEffect(function () {\n        function onResize() {\n            setWindowSize(getDimensions());\n        }\n        window.addEventListener('resize', onResize);\n        return function () {\n            window.removeEventListener('resize', onResize);\n        };\n    }, []);\n    return windowSize;\n}\n"]},"metadata":{},"sourceType":"module"}