{"ast":null,"code":"/* eslint-disable sort-keys-fix/sort-keys-fix */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useState, useEffect, useCallback } from \"react\";\n/**\n * useLocalstorage hook\n * Tracks a value within localStorage and updates it\n *\n * @param {string} key - Key of the localStorage object\n * @param {any} defaultValue - Default initial value\n */\n\nfunction useLocalstorage(key, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = null;\n  }\n\n  var _a = useState(getValueFromLocalStorage()),\n      value = _a[0],\n      setValue = _a[1];\n\n  function init() {\n    var valueLoadedFromLocalStorage = getValueFromLocalStorage();\n\n    if (valueLoadedFromLocalStorage === null || valueLoadedFromLocalStorage === \"null\") {\n      set(defaultValue);\n    }\n  }\n\n  function getValueFromLocalStorage() {\n    if (typeof localStorage === \"undefined\") {\n      return null;\n    }\n\n    var storedValue = localStorage.getItem(key) || \"null\";\n\n    try {\n      return JSON.parse(storedValue);\n    } catch (error) {\n      console.error(error);\n    }\n\n    return storedValue;\n  }\n\n  function saveValueToLocalStorage(valueToSet) {\n    if (typeof localStorage === \"undefined\") {\n      return null;\n    }\n\n    return localStorage.setItem(key, JSON.stringify(valueToSet));\n  }\n\n  var set = useCallback(function (newValue) {\n    setValue(newValue);\n    saveValueToLocalStorage(newValue);\n  }, []);\n  var listen = useCallback(function (event) {\n    if (event.storageArea === localStorage && event.key === key) {\n      setValue(event.newValue);\n    }\n  }, []); // eslint-disable-next-line consistent-return\n\n  var remove = useCallback(function () {\n    set(null);\n\n    if (typeof localStorage === \"undefined\") {\n      return false;\n    }\n\n    localStorage.removeItem(key);\n  }, [key]); // initialize\n\n  useEffect(function () {\n    init();\n  }, []); // check for changes across windows\n\n  useEffect(function () {\n    window.addEventListener(\"storage\", listen);\n    return function () {\n      window.removeEventListener(\"storage\", listen);\n    };\n  }, []);\n  var handler = Object.assign([value, set, remove], {\n    value: value,\n    remove: remove,\n    set: set\n  });\n  return handler;\n}\n\nexport { useLocalstorage };","map":{"version":3,"sources":["D:/react/productwebsite/node_modules/rooks/dist/esm/hooks/useLocalstorage.js"],"names":["useState","useEffect","useCallback","useLocalstorage","key","defaultValue","_a","getValueFromLocalStorage","value","setValue","init","valueLoadedFromLocalStorage","set","localStorage","storedValue","getItem","JSON","parse","error","console","saveValueToLocalStorage","valueToSet","setItem","stringify","newValue","listen","event","storageArea","remove","removeItem","window","addEventListener","removeEventListener","handler","Object","assign"],"mappings":"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","sourcesContent":["/* eslint-disable sort-keys-fix/sort-keys-fix */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useState, useEffect, useCallback } from \"react\";\n/**\n * useLocalstorage hook\n * Tracks a value within localStorage and updates it\n *\n * @param {string} key - Key of the localStorage object\n * @param {any} defaultValue - Default initial value\n */\nfunction useLocalstorage(key, defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    var _a = useState(getValueFromLocalStorage()), value = _a[0], setValue = _a[1];\n    function init() {\n        var valueLoadedFromLocalStorage = getValueFromLocalStorage();\n        if (valueLoadedFromLocalStorage === null ||\n            valueLoadedFromLocalStorage === \"null\") {\n            set(defaultValue);\n        }\n    }\n    function getValueFromLocalStorage() {\n        if (typeof localStorage === \"undefined\") {\n            return null;\n        }\n        var storedValue = localStorage.getItem(key) || \"null\";\n        try {\n            return JSON.parse(storedValue);\n        }\n        catch (error) {\n            console.error(error);\n        }\n        return storedValue;\n    }\n    function saveValueToLocalStorage(valueToSet) {\n        if (typeof localStorage === \"undefined\") {\n            return null;\n        }\n        return localStorage.setItem(key, JSON.stringify(valueToSet));\n    }\n    var set = useCallback(function (newValue) {\n        setValue(newValue);\n        saveValueToLocalStorage(newValue);\n    }, []);\n    var listen = useCallback(function (event) {\n        if (event.storageArea === localStorage && event.key === key) {\n            setValue(event.newValue);\n        }\n    }, []);\n    // eslint-disable-next-line consistent-return\n    var remove = useCallback(function () {\n        set(null);\n        if (typeof localStorage === \"undefined\") {\n            return false;\n        }\n        localStorage.removeItem(key);\n    }, [key]);\n    // initialize\n    useEffect(function () {\n        init();\n    }, []);\n    // check for changes across windows\n    useEffect(function () {\n        window.addEventListener(\"storage\", listen);\n        return function () {\n            window.removeEventListener(\"storage\", listen);\n        };\n    }, []);\n    var handler = Object.assign([value, set, remove], {\n        value: value,\n        remove: remove,\n        set: set,\n    });\n    return handler;\n}\nexport { useLocalstorage };\n"]},"metadata":{},"sourceType":"module"}