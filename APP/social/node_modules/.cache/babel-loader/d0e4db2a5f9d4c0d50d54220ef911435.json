{"ast":null,"code":"import { useRef, useEffect } from \"react\";\n/**\n * A setInterval hook that calls a callback after a interval duration\n * when a condition is true\n *\n * @param cb The callback to be invoked after interval\n * @param intervalDurationMs Amount of time in ms after which to invoke\n * @param when The condition which when true, sets the interval\n * @param startImmediate If the callback should be invoked immediately\n */\n\nfunction useIntervalWhen(callback_, intervalDurationMs, when, startImmediate) {\n  if (intervalDurationMs === void 0) {\n    intervalDurationMs = 0;\n  }\n\n  if (when === void 0) {\n    when = true;\n  }\n\n  if (startImmediate === void 0) {\n    startImmediate = false;\n  }\n\n  var savedRefCallback = useRef();\n  useEffect(function () {\n    savedRefCallback.current = callback_;\n  });\n\n  function callback() {\n    savedRefCallback.current && savedRefCallback.current();\n  }\n\n  useEffect(function () {\n    if (when) {\n      if (startImmediate) {\n        callback();\n      }\n\n      var interval_1 = window.setInterval(callback, intervalDurationMs);\n      return function () {\n        window.clearInterval(interval_1);\n      };\n    }\n  }, [when, intervalDurationMs]);\n}\n\nexport { useIntervalWhen };","map":{"version":3,"sources":["D:/react/productwebsite/node_modules/rooks/dist/esm/hooks/useIntervalWhen.js"],"names":["useRef","useEffect","useIntervalWhen","callback_","intervalDurationMs","when","startImmediate","savedRefCallback","current","callback","interval_1","window","setInterval","clearInterval"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,kBAApC,EAAwDC,IAAxD,EAA8DC,cAA9D,EAA8E;AAC1E,MAAIF,kBAAkB,KAAK,KAAK,CAAhC,EAAmC;AAAEA,IAAAA,kBAAkB,GAAG,CAArB;AAAyB;;AAC9D,MAAIC,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,IAAP;AAAc;;AACrC,MAAIC,cAAc,KAAK,KAAK,CAA5B,EAA+B;AAAEA,IAAAA,cAAc,GAAG,KAAjB;AAAyB;;AAC1D,MAAIC,gBAAgB,GAAGP,MAAM,EAA7B;AACAC,EAAAA,SAAS,CAAC,YAAY;AAClBM,IAAAA,gBAAgB,CAACC,OAAjB,GAA2BL,SAA3B;AACH,GAFQ,CAAT;;AAGA,WAASM,QAAT,GAAoB;AAChBF,IAAAA,gBAAgB,CAACC,OAAjB,IAA4BD,gBAAgB,CAACC,OAAjB,EAA5B;AACH;;AACDP,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAII,IAAJ,EAAU;AACN,UAAIC,cAAJ,EAAoB;AAChBG,QAAAA,QAAQ;AACX;;AACD,UAAIC,UAAU,GAAGC,MAAM,CAACC,WAAP,CAAmBH,QAAnB,EAA6BL,kBAA7B,CAAjB;AACA,aAAO,YAAY;AACfO,QAAAA,MAAM,CAACE,aAAP,CAAqBH,UAArB;AACH,OAFD;AAGH;AACJ,GAVQ,EAUN,CAACL,IAAD,EAAOD,kBAAP,CAVM,CAAT;AAWH;;AACD,SAASF,eAAT","sourcesContent":["import { useRef, useEffect } from \"react\";\n/**\n * A setInterval hook that calls a callback after a interval duration\n * when a condition is true\n *\n * @param cb The callback to be invoked after interval\n * @param intervalDurationMs Amount of time in ms after which to invoke\n * @param when The condition which when true, sets the interval\n * @param startImmediate If the callback should be invoked immediately\n */\nfunction useIntervalWhen(callback_, intervalDurationMs, when, startImmediate) {\n    if (intervalDurationMs === void 0) { intervalDurationMs = 0; }\n    if (when === void 0) { when = true; }\n    if (startImmediate === void 0) { startImmediate = false; }\n    var savedRefCallback = useRef();\n    useEffect(function () {\n        savedRefCallback.current = callback_;\n    });\n    function callback() {\n        savedRefCallback.current && savedRefCallback.current();\n    }\n    useEffect(function () {\n        if (when) {\n            if (startImmediate) {\n                callback();\n            }\n            var interval_1 = window.setInterval(callback, intervalDurationMs);\n            return function () {\n                window.clearInterval(interval_1);\n            };\n        }\n    }, [when, intervalDurationMs]);\n}\nexport { useIntervalWhen };\n"]},"metadata":{},"sourceType":"module"}