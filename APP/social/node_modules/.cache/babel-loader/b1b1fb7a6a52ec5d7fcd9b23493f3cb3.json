{"ast":null,"code":"import { useState, useRef, useEffect, useCallback } from \"react\";\nimport { useWarningOnMountInDevelopment } from \"./useWarningOnMountInDevelopment\";\n/**\n * A setTimeout hook that calls a callback after a timeout duration\n *\n * @param cb The callback to be invoked after timeout\n * @param timeoutDelayMs Amount of time in ms after which to invoke\n */\n\nfunction useTimeout(callback_, timeoutDelayMs) {\n  if (timeoutDelayMs === void 0) {\n    timeoutDelayMs = 0;\n  }\n\n  useWarningOnMountInDevelopment(\"useTimeout is deprecated, it will be removed in rooks v7. Please use useTimeoutWhen instead.\");\n\n  var _a = useState(false),\n      isTimeoutActive = _a[0],\n      setIsTimeoutActive = _a[1];\n\n  var savedRefCallback = useRef();\n  useEffect(function () {\n    savedRefCallback.current = callback_;\n  }, [callback_]);\n\n  function callback() {\n    savedRefCallback.current && savedRefCallback.current();\n    clear();\n  }\n\n  var clear = useCallback(function () {\n    setIsTimeoutActive(false);\n  }, []);\n  var start = useCallback(function () {\n    setIsTimeoutActive(true);\n  }, []);\n  useEffect(function () {\n    if (isTimeoutActive) {\n      var timeout_1 = window.setTimeout(callback, timeoutDelayMs);\n      return function () {\n        window.clearTimeout(timeout_1);\n      };\n    }\n  }, [isTimeoutActive, timeoutDelayMs]);\n  return {\n    clear: clear,\n    isActive: isTimeoutActive,\n    start: start,\n    stop: clear\n  };\n}\n\nexport { useTimeout };","map":{"version":3,"sources":["D:/react/productwebsite/node_modules/rooks/dist/esm/hooks/useTimeout.js"],"names":["useState","useRef","useEffect","useCallback","useWarningOnMountInDevelopment","useTimeout","callback_","timeoutDelayMs","_a","isTimeoutActive","setIsTimeoutActive","savedRefCallback","current","callback","clear","start","timeout_1","window","setTimeout","clearTimeout","isActive","stop"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,EAAsCC,WAAtC,QAAyD,OAAzD;AACA,SAASC,8BAAT,QAA+C,kCAA/C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,cAA/B,EAA+C;AAC3C,MAAIA,cAAc,KAAK,KAAK,CAA5B,EAA+B;AAAEA,IAAAA,cAAc,GAAG,CAAjB;AAAqB;;AACtDH,EAAAA,8BAA8B,CAAC,8FAAD,CAA9B;;AACA,MAAII,EAAE,GAAGR,QAAQ,CAAC,KAAD,CAAjB;AAAA,MAA0BS,eAAe,GAAGD,EAAE,CAAC,CAAD,CAA9C;AAAA,MAAmDE,kBAAkB,GAAGF,EAAE,CAAC,CAAD,CAA1E;;AACA,MAAIG,gBAAgB,GAAGV,MAAM,EAA7B;AACAC,EAAAA,SAAS,CAAC,YAAY;AAClBS,IAAAA,gBAAgB,CAACC,OAAjB,GAA2BN,SAA3B;AACH,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;;AAGA,WAASO,QAAT,GAAoB;AAChBF,IAAAA,gBAAgB,CAACC,OAAjB,IAA4BD,gBAAgB,CAACC,OAAjB,EAA5B;AACAE,IAAAA,KAAK;AACR;;AACD,MAAIA,KAAK,GAAGX,WAAW,CAAC,YAAY;AAChCO,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH,GAFsB,EAEpB,EAFoB,CAAvB;AAGA,MAAIK,KAAK,GAAGZ,WAAW,CAAC,YAAY;AAChCO,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH,GAFsB,EAEpB,EAFoB,CAAvB;AAGAR,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIO,eAAJ,EAAqB;AACjB,UAAIO,SAAS,GAAGC,MAAM,CAACC,UAAP,CAAkBL,QAAlB,EAA4BN,cAA5B,CAAhB;AACA,aAAO,YAAY;AACfU,QAAAA,MAAM,CAACE,YAAP,CAAoBH,SAApB;AACH,OAFD;AAGH;AACJ,GAPQ,EAON,CAACP,eAAD,EAAkBF,cAAlB,CAPM,CAAT;AAQA,SAAO;AACHO,IAAAA,KAAK,EAAEA,KADJ;AAEHM,IAAAA,QAAQ,EAAEX,eAFP;AAGHM,IAAAA,KAAK,EAAEA,KAHJ;AAIHM,IAAAA,IAAI,EAAEP;AAJH,GAAP;AAMH;;AACD,SAAST,UAAT","sourcesContent":["import { useState, useRef, useEffect, useCallback } from \"react\";\nimport { useWarningOnMountInDevelopment } from \"./useWarningOnMountInDevelopment\";\n/**\n * A setTimeout hook that calls a callback after a timeout duration\n *\n * @param cb The callback to be invoked after timeout\n * @param timeoutDelayMs Amount of time in ms after which to invoke\n */\nfunction useTimeout(callback_, timeoutDelayMs) {\n    if (timeoutDelayMs === void 0) { timeoutDelayMs = 0; }\n    useWarningOnMountInDevelopment(\"useTimeout is deprecated, it will be removed in rooks v7. Please use useTimeoutWhen instead.\");\n    var _a = useState(false), isTimeoutActive = _a[0], setIsTimeoutActive = _a[1];\n    var savedRefCallback = useRef();\n    useEffect(function () {\n        savedRefCallback.current = callback_;\n    }, [callback_]);\n    function callback() {\n        savedRefCallback.current && savedRefCallback.current();\n        clear();\n    }\n    var clear = useCallback(function () {\n        setIsTimeoutActive(false);\n    }, []);\n    var start = useCallback(function () {\n        setIsTimeoutActive(true);\n    }, []);\n    useEffect(function () {\n        if (isTimeoutActive) {\n            var timeout_1 = window.setTimeout(callback, timeoutDelayMs);\n            return function () {\n                window.clearTimeout(timeout_1);\n            };\n        }\n    }, [isTimeoutActive, timeoutDelayMs]);\n    return {\n        clear: clear,\n        isActive: isTimeoutActive,\n        start: start,\n        stop: clear,\n    };\n}\nexport { useTimeout };\n"]},"metadata":{},"sourceType":"module"}