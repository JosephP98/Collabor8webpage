{"ast":null,"code":"import { useEffect, useRef } from 'react';\n/**\n *  useDidUpdate hook\n *\n *  Fires a callback on component update\n *  Can take in a list of conditions to fire callback when one of the\n *  conditions changes\n *\n * @param {Function} callback The callback to be called on update\n * @param {Array} conditions The list of variables which trigger update when they are changed\n * @returns {undefined}\n */\n\nfunction useDidUpdate(callback, conditions) {\n  var hasMountedRef = useRef(false);\n\n  if (typeof conditions !== 'undefined' && !Array.isArray(conditions)) {\n    conditions = [conditions];\n  } else if (Array.isArray(conditions) && conditions.length === 0) {\n    console.warn('Using [] as the second argument makes useDidUpdate a noop. The second argument should either be `undefined` or an array of length greater than 0.');\n  }\n\n  useEffect(function () {\n    if (hasMountedRef.current) {\n      callback();\n    } else {\n      hasMountedRef.current = true;\n    }\n  }, conditions);\n}\n\nexport { useDidUpdate };","map":{"version":3,"sources":["D:/react/productwebsite/node_modules/rooks/dist/esm/hooks/useDidUpdate.js"],"names":["useEffect","useRef","useDidUpdate","callback","conditions","hasMountedRef","Array","isArray","length","console","warn","current"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,UAAhC,EAA4C;AACxC,MAAIC,aAAa,GAAGJ,MAAM,CAAC,KAAD,CAA1B;;AACA,MAAI,OAAOG,UAAP,KAAsB,WAAtB,IAAqC,CAACE,KAAK,CAACC,OAAN,CAAcH,UAAd,CAA1C,EAAqE;AACjEA,IAAAA,UAAU,GAAG,CAACA,UAAD,CAAb;AACH,GAFD,MAGK,IAAIE,KAAK,CAACC,OAAN,CAAcH,UAAd,KAA6BA,UAAU,CAACI,MAAX,KAAsB,CAAvD,EAA0D;AAC3DC,IAAAA,OAAO,CAACC,IAAR,CAAa,mJAAb;AACH;;AACDV,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIK,aAAa,CAACM,OAAlB,EAA2B;AACvBR,MAAAA,QAAQ;AACX,KAFD,MAGK;AACDE,MAAAA,aAAa,CAACM,OAAd,GAAwB,IAAxB;AACH;AACJ,GAPQ,EAONP,UAPM,CAAT;AAQH;;AACD,SAASF,YAAT","sourcesContent":["import { useEffect, useRef } from 'react';\n/**\n *  useDidUpdate hook\n *\n *  Fires a callback on component update\n *  Can take in a list of conditions to fire callback when one of the\n *  conditions changes\n *\n * @param {Function} callback The callback to be called on update\n * @param {Array} conditions The list of variables which trigger update when they are changed\n * @returns {undefined}\n */\nfunction useDidUpdate(callback, conditions) {\n    var hasMountedRef = useRef(false);\n    if (typeof conditions !== 'undefined' && !Array.isArray(conditions)) {\n        conditions = [conditions];\n    }\n    else if (Array.isArray(conditions) && conditions.length === 0) {\n        console.warn('Using [] as the second argument makes useDidUpdate a noop. The second argument should either be `undefined` or an array of length greater than 0.');\n    }\n    useEffect(function () {\n        if (hasMountedRef.current) {\n            callback();\n        }\n        else {\n            hasMountedRef.current = true;\n        }\n    }, conditions);\n}\nexport { useDidUpdate };\n"]},"metadata":{},"sourceType":"module"}