{"ast":null,"code":"import { useEffect, useRef, useCallback, useState } from \"react\";\n/**\n * useOutsideClickRef hook\n * Checks if a click happened outside a Ref. Handy for dropdowns, modals and popups etc.\n *\n * @param handler Callback to fire on outside click\n * @param when A boolean which which activates the hook only when it is true. Useful for conditionally enable the outside click\n * @returns An array with first item being ref\n */\n\nfunction useOutsideClickRef(handler, when) {\n  if (when === void 0) {\n    when = true;\n  }\n\n  var savedHandler = useRef(handler);\n\n  var _a = useState(null),\n      node = _a[0],\n      setNode = _a[1];\n\n  var memoizedCallback = useCallback(function (e) {\n    if (node && !node.contains(e.target)) {\n      savedHandler.current(e);\n    }\n  }, [node]);\n  useEffect(function () {\n    savedHandler.current = handler;\n  });\n  var ref = useCallback(function (node) {\n    setNode(node);\n  }, []);\n  useEffect(function () {\n    if (when) {\n      document.addEventListener(\"click\", memoizedCallback, true);\n      document.addEventListener(\"ontouchstart\", memoizedCallback, true);\n      return function () {\n        document.removeEventListener(\"click\", memoizedCallback, true);\n        document.removeEventListener(\"ontouchstart\", memoizedCallback, true);\n      };\n    }\n  }, [when, memoizedCallback]);\n  return [ref];\n}\n\nexport { useOutsideClickRef };","map":{"version":3,"sources":["D:/react/productwebsite/node_modules/rooks/dist/esm/hooks/useOutsideClickRef.js"],"names":["useEffect","useRef","useCallback","useState","useOutsideClickRef","handler","when","savedHandler","_a","node","setNode","memoizedCallback","e","contains","target","current","ref","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,WAA5B,EAAyCC,QAAzC,QAA0D,OAA1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,IAArC,EAA2C;AACvC,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,IAAP;AAAc;;AACrC,MAAIC,YAAY,GAAGN,MAAM,CAACI,OAAD,CAAzB;;AACA,MAAIG,EAAE,GAAGL,QAAQ,CAAC,IAAD,CAAjB;AAAA,MAAyBM,IAAI,GAAGD,EAAE,CAAC,CAAD,CAAlC;AAAA,MAAuCE,OAAO,GAAGF,EAAE,CAAC,CAAD,CAAnD;;AACA,MAAIG,gBAAgB,GAAGT,WAAW,CAAC,UAAUU,CAAV,EAAa;AAC5C,QAAIH,IAAI,IAAI,CAACA,IAAI,CAACI,QAAL,CAAcD,CAAC,CAACE,MAAhB,CAAb,EAAsC;AAClCP,MAAAA,YAAY,CAACQ,OAAb,CAAqBH,CAArB;AACH;AACJ,GAJiC,EAI/B,CAACH,IAAD,CAJ+B,CAAlC;AAKAT,EAAAA,SAAS,CAAC,YAAY;AAClBO,IAAAA,YAAY,CAACQ,OAAb,GAAuBV,OAAvB;AACH,GAFQ,CAAT;AAGA,MAAIW,GAAG,GAAGd,WAAW,CAAC,UAAUO,IAAV,EAAgB;AAClCC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACH,GAFoB,EAElB,EAFkB,CAArB;AAGAT,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIM,IAAJ,EAAU;AACNW,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCP,gBAAnC,EAAqD,IAArD;AACAM,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,cAA1B,EAA0CP,gBAA1C,EAA4D,IAA5D;AACA,aAAO,YAAY;AACfM,QAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCR,gBAAtC,EAAwD,IAAxD;AACAM,QAAAA,QAAQ,CAACE,mBAAT,CAA6B,cAA7B,EAA6CR,gBAA7C,EAA+D,IAA/D;AACH,OAHD;AAIH;AACJ,GATQ,EASN,CAACL,IAAD,EAAOK,gBAAP,CATM,CAAT;AAUA,SAAO,CAACK,GAAD,CAAP;AACH;;AACD,SAASZ,kBAAT","sourcesContent":["import { useEffect, useRef, useCallback, useState, } from \"react\";\n/**\n * useOutsideClickRef hook\n * Checks if a click happened outside a Ref. Handy for dropdowns, modals and popups etc.\n *\n * @param handler Callback to fire on outside click\n * @param when A boolean which which activates the hook only when it is true. Useful for conditionally enable the outside click\n * @returns An array with first item being ref\n */\nfunction useOutsideClickRef(handler, when) {\n    if (when === void 0) { when = true; }\n    var savedHandler = useRef(handler);\n    var _a = useState(null), node = _a[0], setNode = _a[1];\n    var memoizedCallback = useCallback(function (e) {\n        if (node && !node.contains(e.target)) {\n            savedHandler.current(e);\n        }\n    }, [node]);\n    useEffect(function () {\n        savedHandler.current = handler;\n    });\n    var ref = useCallback(function (node) {\n        setNode(node);\n    }, []);\n    useEffect(function () {\n        if (when) {\n            document.addEventListener(\"click\", memoizedCallback, true);\n            document.addEventListener(\"ontouchstart\", memoizedCallback, true);\n            return function () {\n                document.removeEventListener(\"click\", memoizedCallback, true);\n                document.removeEventListener(\"ontouchstart\", memoizedCallback, true);\n            };\n        }\n    }, [when, memoizedCallback]);\n    return [ref];\n}\nexport { useOutsideClickRef };\n"]},"metadata":{},"sourceType":"module"}