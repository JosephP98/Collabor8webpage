{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\n/**\n * useMediaMatch\n *\n * A react hook that signals whether or not a media query is matched.\n *\n * @param query The media query to signal on. Example, `\"print\"` will signal\n * `true` when previewing in print mode, and `false` otherwise.\n * @returns Whether or not the media query is currently matched.\n */\n\nfunction useMediaMatch(query) {\n  if (typeof window === 'undefined') {\n    console.warn('useMediaMatch cannot function as window is undefined.');\n    return false;\n  }\n\n  var matchMedia = useMemo(function () {\n    return window.matchMedia(query);\n  }, [query]);\n\n  var _a = useState(function () {\n    return matchMedia.matches;\n  }),\n      matches = _a[0],\n      setMatches = _a[1];\n\n  useEffect(function () {\n    setMatches(matchMedia.matches);\n\n    var listener = function (event_) {\n      return setMatches(event_.matches);\n    };\n\n    if (matchMedia.addEventListener) {\n      matchMedia.addEventListener('change', listener);\n      return function () {\n        return matchMedia.removeEventListener('change', listener);\n      };\n    } else {\n      matchMedia.addListener(listener);\n      return function () {\n        return matchMedia.removeListener(listener);\n      };\n    }\n  }, [matchMedia]);\n  return matches;\n}\n\nexport { useMediaMatch };","map":{"version":3,"sources":["D:/react/productwebsite/node_modules/rooks/dist/esm/hooks/useMediaMatch.js"],"names":["useEffect","useMemo","useState","useMediaMatch","query","window","console","warn","matchMedia","_a","matches","setMatches","listener","event_","addEventListener","removeEventListener","addListener","removeListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAC/BC,IAAAA,OAAO,CAACC,IAAR,CAAa,uDAAb;AACA,WAAO,KAAP;AACH;;AACD,MAAIC,UAAU,GAAGP,OAAO,CAAC,YAAY;AAAE,WAAOI,MAAM,CAACG,UAAP,CAAkBJ,KAAlB,CAAP;AAAkC,GAAjD,EAAmD,CACvEA,KADuE,CAAnD,CAAxB;;AAGA,MAAIK,EAAE,GAAGP,QAAQ,CAAC,YAAY;AAAE,WAAOM,UAAU,CAACE,OAAlB;AAA4B,GAA3C,CAAjB;AAAA,MAA+DA,OAAO,GAAGD,EAAE,CAAC,CAAD,CAA3E;AAAA,MAAgFE,UAAU,GAAGF,EAAE,CAAC,CAAD,CAA/F;;AACAT,EAAAA,SAAS,CAAC,YAAY;AAClBW,IAAAA,UAAU,CAACH,UAAU,CAACE,OAAZ,CAAV;;AACA,QAAIE,QAAQ,GAAG,UAAUC,MAAV,EAAkB;AAC7B,aAAOF,UAAU,CAACE,MAAM,CAACH,OAAR,CAAjB;AACH,KAFD;;AAGA,QAAIF,UAAU,CAACM,gBAAf,EAAiC;AAC7BN,MAAAA,UAAU,CAACM,gBAAX,CAA4B,QAA5B,EAAsCF,QAAtC;AACA,aAAO,YAAY;AAAE,eAAOJ,UAAU,CAACO,mBAAX,CAA+B,QAA/B,EAAyCH,QAAzC,CAAP;AAA4D,OAAjF;AACH,KAHD,MAIK;AACDJ,MAAAA,UAAU,CAACQ,WAAX,CAAuBJ,QAAvB;AACA,aAAO,YAAY;AAAE,eAAOJ,UAAU,CAACS,cAAX,CAA0BL,QAA1B,CAAP;AAA6C,OAAlE;AACH;AACJ,GAbQ,EAaN,CAACJ,UAAD,CAbM,CAAT;AAcA,SAAOE,OAAP;AACH;;AACD,SAASP,aAAT","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\n/**\n * useMediaMatch\n *\n * A react hook that signals whether or not a media query is matched.\n *\n * @param query The media query to signal on. Example, `\"print\"` will signal\n * `true` when previewing in print mode, and `false` otherwise.\n * @returns Whether or not the media query is currently matched.\n */\nfunction useMediaMatch(query) {\n    if (typeof window === 'undefined') {\n        console.warn('useMediaMatch cannot function as window is undefined.');\n        return false;\n    }\n    var matchMedia = useMemo(function () { return window.matchMedia(query); }, [\n        query,\n    ]);\n    var _a = useState(function () { return matchMedia.matches; }), matches = _a[0], setMatches = _a[1];\n    useEffect(function () {\n        setMatches(matchMedia.matches);\n        var listener = function (event_) {\n            return setMatches(event_.matches);\n        };\n        if (matchMedia.addEventListener) {\n            matchMedia.addEventListener('change', listener);\n            return function () { return matchMedia.removeEventListener('change', listener); };\n        }\n        else {\n            matchMedia.addListener(listener);\n            return function () { return matchMedia.removeListener(listener); };\n        }\n    }, [matchMedia]);\n    return matches;\n}\nexport { useMediaMatch };\n"]},"metadata":{},"sourceType":"module"}