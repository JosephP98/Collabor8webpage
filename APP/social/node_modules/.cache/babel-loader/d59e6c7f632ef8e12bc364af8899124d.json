{"ast":null,"code":"import raf from 'raf';\nimport { useRef, useEffect } from 'react';\n/**\n *\n * useRaf\n * Uses a polyfilled version of requestAnimationFrame\n *\n * @param {Function} callback The callback function to be executed\n * @param {boolean} [isActive=true] The value which while true, keeps the raf running infinitely\n */\n\nexport function useRaf(callback, isActive) {\n  var savedCallback = useRef(); // Remember the latest function.\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(function () {\n    var animationFrame;\n    var startTime;\n\n    function tick() {\n      var timeElapsed = Date.now() - startTime;\n      startTime = Date.now();\n      loop();\n      savedCallback.current && savedCallback.current(timeElapsed);\n    }\n\n    function loop() {\n      animationFrame = raf(tick);\n    }\n\n    if (isActive) {\n      startTime = Date.now();\n      loop();\n      return function () {\n        raf.cancel(animationFrame);\n      };\n    }\n  }, [isActive]);\n}","map":{"version":3,"sources":["D:/react/productwebsite/node_modules/rooks/dist/esm/hooks/useRaf.js"],"names":["raf","useRef","useEffect","useRaf","callback","isActive","savedCallback","current","animationFrame","startTime","tick","timeElapsed","Date","now","loop","cancel"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,QAA1B,EAAoC;AACvC,MAAIC,aAAa,GAAGL,MAAM,EAA1B,CADuC,CAEvC;;AACAC,EAAAA,SAAS,CAAC,YAAY;AAClBI,IAAAA,aAAa,CAACC,OAAd,GAAwBH,QAAxB;AACH,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAGAF,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIM,cAAJ;AACA,QAAIC,SAAJ;;AACA,aAASC,IAAT,GAAgB;AACZ,UAAIC,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAaJ,SAA/B;AACAA,MAAAA,SAAS,GAAGG,IAAI,CAACC,GAAL,EAAZ;AACAC,MAAAA,IAAI;AACJR,MAAAA,aAAa,CAACC,OAAd,IAAyBD,aAAa,CAACC,OAAd,CAAsBI,WAAtB,CAAzB;AACH;;AACD,aAASG,IAAT,GAAgB;AACZN,MAAAA,cAAc,GAAGR,GAAG,CAACU,IAAD,CAApB;AACH;;AACD,QAAIL,QAAJ,EAAc;AACVI,MAAAA,SAAS,GAAGG,IAAI,CAACC,GAAL,EAAZ;AACAC,MAAAA,IAAI;AACJ,aAAO,YAAY;AACfd,QAAAA,GAAG,CAACe,MAAJ,CAAWP,cAAX;AACH,OAFD;AAGH;AACJ,GAnBQ,EAmBN,CAACH,QAAD,CAnBM,CAAT;AAoBH","sourcesContent":["import raf from 'raf';\nimport { useRef, useEffect } from 'react';\n/**\n *\n * useRaf\n * Uses a polyfilled version of requestAnimationFrame\n *\n * @param {Function} callback The callback function to be executed\n * @param {boolean} [isActive=true] The value which while true, keeps the raf running infinitely\n */\nexport function useRaf(callback, isActive) {\n    var savedCallback = useRef();\n    // Remember the latest function.\n    useEffect(function () {\n        savedCallback.current = callback;\n    }, [callback]);\n    useEffect(function () {\n        var animationFrame;\n        var startTime;\n        function tick() {\n            var timeElapsed = Date.now() - startTime;\n            startTime = Date.now();\n            loop();\n            savedCallback.current && savedCallback.current(timeElapsed);\n        }\n        function loop() {\n            animationFrame = raf(tick);\n        }\n        if (isActive) {\n            startTime = Date.now();\n            loop();\n            return function () {\n                raf.cancel(animationFrame);\n            };\n        }\n    }, [isActive]);\n}\n"]},"metadata":{},"sourceType":"module"}