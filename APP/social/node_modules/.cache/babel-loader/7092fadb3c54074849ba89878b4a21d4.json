{"ast":null,"code":"import { useEffect, useRef } from 'react';\n/**\n * useEffectOnceWhen hook\n *\n * It fires a callback once when a condition is true or become true.\n * Fires the callback at most one time.\n *\n * @param callback The callback to fire\n * @param when The condition which needs to be true\n */\n\nfunction useEffectOnceWhen(callback, when) {\n  if (when === void 0) {\n    when = true;\n  }\n\n  var hasRunOnceRef = useRef(false);\n  var callbackRef = useRef(callback);\n  useEffect(function () {\n    callbackRef.current = callback;\n  });\n  useEffect(function () {\n    if (when && !hasRunOnceRef.current) {\n      callbackRef.current();\n      hasRunOnceRef.current = true;\n    }\n  }, [when]);\n}\n\nexport { useEffectOnceWhen };","map":{"version":3,"sources":["D:/react/productwebsite/node_modules/rooks/dist/esm/hooks/useEffectOnceWhen.js"],"names":["useEffect","useRef","useEffectOnceWhen","callback","when","hasRunOnceRef","callbackRef","current"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,QAA3B,EAAqCC,IAArC,EAA2C;AACvC,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,IAAP;AAAc;;AACrC,MAAIC,aAAa,GAAGJ,MAAM,CAAC,KAAD,CAA1B;AACA,MAAIK,WAAW,GAAGL,MAAM,CAACE,QAAD,CAAxB;AACAH,EAAAA,SAAS,CAAC,YAAY;AAClBM,IAAAA,WAAW,CAACC,OAAZ,GAAsBJ,QAAtB;AACH,GAFQ,CAAT;AAGAH,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAII,IAAI,IAAI,CAACC,aAAa,CAACE,OAA3B,EAAoC;AAChCD,MAAAA,WAAW,CAACC,OAAZ;AACAF,MAAAA,aAAa,CAACE,OAAd,GAAwB,IAAxB;AACH;AACJ,GALQ,EAKN,CAACH,IAAD,CALM,CAAT;AAMH;;AACD,SAASF,iBAAT","sourcesContent":["import { useEffect, useRef } from 'react';\n/**\n * useEffectOnceWhen hook\n *\n * It fires a callback once when a condition is true or become true.\n * Fires the callback at most one time.\n *\n * @param callback The callback to fire\n * @param when The condition which needs to be true\n */\nfunction useEffectOnceWhen(callback, when) {\n    if (when === void 0) { when = true; }\n    var hasRunOnceRef = useRef(false);\n    var callbackRef = useRef(callback);\n    useEffect(function () {\n        callbackRef.current = callback;\n    });\n    useEffect(function () {\n        if (when && !hasRunOnceRef.current) {\n            callbackRef.current();\n            hasRunOnceRef.current = true;\n        }\n    }, [when]);\n}\nexport { useEffectOnceWhen };\n"]},"metadata":{},"sourceType":"module"}