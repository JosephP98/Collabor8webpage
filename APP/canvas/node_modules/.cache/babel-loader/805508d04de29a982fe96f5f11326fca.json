{"ast":null,"code":"import { useEffect, useCallback, useState } from 'react';\nvar config = {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true\n};\n/**\n *\n * useMutationObserverRef hook\n *\n * Returns a mutation observer for a React Ref and fires a callback\n *\n * @param {MutationCallback} callback Function that needs to be fired on mutation\n * @param {MutationObserverInit} options\n */\n\nfunction useMutationObserverRef(callback, options) {\n  if (options === void 0) {\n    options = config;\n  }\n\n  var _a = useState(null),\n      node = _a[0],\n      setNode = _a[1];\n\n  useEffect(function () {\n    // Create an observer instance linked to the callback function\n    if (node) {\n      var observer_1 = new MutationObserver(callback); // Start observing the target node for configured mutations\n\n      observer_1.observe(node, options);\n      return function () {\n        observer_1.disconnect();\n      };\n    }\n  }, [node, callback, options]);\n  var ref = useCallback(function (node) {\n    setNode(node);\n  }, []);\n  return [ref];\n}\n\nexport { useMutationObserverRef };","map":{"version":3,"sources":["D:/react/productwebsite/APP/canvas/node_modules/rooks/dist/esm/hooks/useMutationObserverRef.js"],"names":["useEffect","useCallback","useState","config","attributes","characterData","childList","subtree","useMutationObserverRef","callback","options","_a","node","setNode","observer_1","MutationObserver","observe","disconnect","ref"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,IAAIC,MAAM,GAAG;AACTC,EAAAA,UAAU,EAAE,IADH;AAETC,EAAAA,aAAa,EAAE,IAFN;AAGTC,EAAAA,SAAS,EAAE,IAHF;AAITC,EAAAA,OAAO,EAAE;AAJA,CAAb;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,sBAAT,CAAgCC,QAAhC,EAA0CC,OAA1C,EAAmD;AAC/C,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAGP,MAAV;AAAmB;;AAC7C,MAAIQ,EAAE,GAAGT,QAAQ,CAAC,IAAD,CAAjB;AAAA,MAAyBU,IAAI,GAAGD,EAAE,CAAC,CAAD,CAAlC;AAAA,MAAuCE,OAAO,GAAGF,EAAE,CAAC,CAAD,CAAnD;;AACAX,EAAAA,SAAS,CAAC,YAAY;AAClB;AACA,QAAIY,IAAJ,EAAU;AACN,UAAIE,UAAU,GAAG,IAAIC,gBAAJ,CAAqBN,QAArB,CAAjB,CADM,CAEN;;AACAK,MAAAA,UAAU,CAACE,OAAX,CAAmBJ,IAAnB,EAAyBF,OAAzB;AACA,aAAO,YAAY;AACfI,QAAAA,UAAU,CAACG,UAAX;AACH,OAFD;AAGH;AACJ,GAVQ,EAUN,CAACL,IAAD,EAAOH,QAAP,EAAiBC,OAAjB,CAVM,CAAT;AAWA,MAAIQ,GAAG,GAAGjB,WAAW,CAAC,UAAUW,IAAV,EAAgB;AAClCC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACH,GAFoB,EAElB,EAFkB,CAArB;AAGA,SAAO,CAACM,GAAD,CAAP;AACH;;AACD,SAASV,sBAAT","sourcesContent":["import { useEffect, useCallback, useState } from 'react';\nvar config = {\n    attributes: true,\n    characterData: true,\n    childList: true,\n    subtree: true,\n};\n/**\n *\n * useMutationObserverRef hook\n *\n * Returns a mutation observer for a React Ref and fires a callback\n *\n * @param {MutationCallback} callback Function that needs to be fired on mutation\n * @param {MutationObserverInit} options\n */\nfunction useMutationObserverRef(callback, options) {\n    if (options === void 0) { options = config; }\n    var _a = useState(null), node = _a[0], setNode = _a[1];\n    useEffect(function () {\n        // Create an observer instance linked to the callback function\n        if (node) {\n            var observer_1 = new MutationObserver(callback);\n            // Start observing the target node for configured mutations\n            observer_1.observe(node, options);\n            return function () {\n                observer_1.disconnect();\n            };\n        }\n    }, [node, callback, options]);\n    var ref = useCallback(function (node) {\n        setNode(node);\n    }, []);\n    return [ref];\n}\nexport { useMutationObserverRef };\n"]},"metadata":{},"sourceType":"module"}