{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useMemo } from 'react';\n\nfunction setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n/**\n * useMergeRefs\n * Merges multiple refs into a single function ref.\n * Takes any number of refs.\n * Refs can be mutable refs or function refs.\n *\n * @param refs\n */\n\n\nfunction useMergeReferences() {\n  var references = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    references[_i] = arguments[_i];\n  }\n\n  return useMemo(function () {\n    if (references.every(function (ref) {\n      return ref === null;\n    })) {\n      return null;\n    }\n\n    return function (refValue) {\n      references.forEach(function (ref) {\n        setRef(ref, refValue);\n      });\n    };\n  }, __spreadArray([], references, true));\n}\n\nexport { useMergeReferences as useMergeRefs };","map":{"version":3,"sources":["D:/react/productwebsite/APP/canvas/node_modules/rooks/dist/esm/hooks/useMergeRefs.js"],"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","useMemo","setRef","ref","value","current","useMergeReferences","references","_i","every","refValue","forEach","useMergeRefs"],"mappings":"AAAA,IAAIA,aAAa,GAAI,QAAQ,KAAKA,aAAd,IAAgC,UAAUC,EAAV,EAAcC,IAAd,EAAoBC,IAApB,EAA0B;AAC1E,MAAIA,IAAI,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAjC,EAAoC,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,IAAI,CAACG,MAApB,EAA4BG,EAAjC,EAAqCF,CAAC,GAAGC,CAAzC,EAA4CD,CAAC,EAA7C,EAAiD;AACjF,QAAIE,EAAE,IAAI,EAAEF,CAAC,IAAIJ,IAAP,CAAV,EAAwB;AACpB,UAAI,CAACM,EAAL,EAASA,EAAE,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BV,IAA3B,EAAiC,CAAjC,EAAoCI,CAApC,CAAL;AACTE,MAAAA,EAAE,CAACF,CAAD,CAAF,GAAQJ,IAAI,CAACI,CAAD,CAAZ;AACH;AACJ;AACD,SAAOL,EAAE,CAACY,MAAH,CAAUL,EAAE,IAAIC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BV,IAA3B,CAAhB,CAAP;AACH,CARD;;AASA,SAASY,OAAT,QAAwB,OAAxB;;AACA,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,KAArB,EAA4B;AACxB,MAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC3BA,IAAAA,GAAG,CAACC,KAAD,CAAH;AACH,GAFD,MAGK,IAAID,GAAJ,EAAS;AACVA,IAAAA,GAAG,CAACE,OAAJ,GAAcD,KAAd;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,kBAAT,GAA8B;AAC1B,MAAIC,UAAU,GAAG,EAAjB;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGjB,SAAS,CAACC,MAAhC,EAAwCgB,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,UAAU,CAACC,EAAD,CAAV,GAAiBjB,SAAS,CAACiB,EAAD,CAA1B;AACH;;AACD,SAAOP,OAAO,CAAC,YAAY;AACvB,QAAIM,UAAU,CAACE,KAAX,CAAiB,UAAUN,GAAV,EAAe;AAAE,aAAOA,GAAG,KAAK,IAAf;AAAsB,KAAxD,CAAJ,EAA+D;AAC3D,aAAO,IAAP;AACH;;AACD,WAAO,UAAUO,QAAV,EAAoB;AACvBH,MAAAA,UAAU,CAACI,OAAX,CAAmB,UAAUR,GAAV,EAAe;AAC9BD,QAAAA,MAAM,CAACC,GAAD,EAAMO,QAAN,CAAN;AACH,OAFD;AAGH,KAJD;AAKH,GATa,EASXvB,aAAa,CAAC,EAAD,EAAKoB,UAAL,EAAiB,IAAjB,CATF,CAAd;AAUH;;AACD,SAASD,kBAAkB,IAAIM,YAA/B","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useMemo } from 'react';\nfunction setRef(ref, value) {\n    if (typeof ref === 'function') {\n        ref(value);\n    }\n    else if (ref) {\n        ref.current = value;\n    }\n}\n/**\n * useMergeRefs\n * Merges multiple refs into a single function ref.\n * Takes any number of refs.\n * Refs can be mutable refs or function refs.\n *\n * @param refs\n */\nfunction useMergeReferences() {\n    var references = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        references[_i] = arguments[_i];\n    }\n    return useMemo(function () {\n        if (references.every(function (ref) { return ref === null; })) {\n            return null;\n        }\n        return function (refValue) {\n            references.forEach(function (ref) {\n                setRef(ref, refValue);\n            });\n        };\n    }, __spreadArray([], references, true));\n}\nexport { useMergeReferences as useMergeRefs };\n"]},"metadata":{},"sourceType":"module"}