{"ast":null,"code":"import { useState, useEffect, useCallback, useRef } from \"react\";\n\nfunction getValueFromSessionStorage(key) {\n  if (typeof sessionStorage === \"undefined\") {\n    return null;\n  }\n\n  var storedValue = sessionStorage.getItem(key) || \"null\";\n\n  try {\n    return JSON.parse(storedValue);\n  } catch (error) {\n    console.error(error);\n  }\n\n  return storedValue;\n}\n\nfunction saveValueToSessionStorage(key, value) {\n  if (typeof sessionStorage === \"undefined\") {\n    return null;\n  }\n\n  return sessionStorage.setItem(key, JSON.stringify(value));\n}\n/**\n * @param key Key of the sessionStorage object\n * @param initialState Default initial value\n */\n\n\nfunction initialize(key, initialState) {\n  var valueLoadedFromSessionStorage = getValueFromSessionStorage(key);\n\n  if (valueLoadedFromSessionStorage === null) {\n    return initialState;\n  } else {\n    return valueLoadedFromSessionStorage;\n  }\n}\n/**\n * useSessionstorageState hook\n * Tracks a value within sessionStorage and updates it\n *\n * @param {string} key - Key of the sessionStorage object\n * @param {any} initialState - Default initial value\n */\n\n\nfunction useSessionstorageState(key, initialState) {\n  var _a = useState(function () {\n    return initialize(key, initialState);\n  }),\n      value = _a[0],\n      __setValue = _a[1];\n\n  var isUpdateFromListener = useRef(false);\n  useEffect(function () {\n    /**\n     * We need to ensure there is no loop of\n     * storage events fired. Hence we are using a ref\n     * to keep track of whether setValue is from another\n     * storage event\n     */\n    if (!isUpdateFromListener.current) {\n      saveValueToSessionStorage(key, value);\n    }\n  }, [value]);\n  var listen = useCallback(function (e) {\n    if (e.storageArea === sessionStorage && e.key === key) {\n      try {\n        isUpdateFromListener.current = true;\n        var newValue = JSON.parse(e.newValue || \"null\");\n\n        if (value !== newValue) {\n          __setValue(newValue);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [value]); // check for changes across windows\n\n  useEffect(function () {\n    window.addEventListener(\"storage\", listen);\n    return function () {\n      window.removeEventListener(\"storage\", listen);\n    };\n  }, []);\n  var setValue = useCallback(function (newValue) {\n    isUpdateFromListener.current = false;\n\n    __setValue(newValue);\n  }, []);\n  var remove = useCallback(function () {\n    sessionStorage.removeItem(key);\n  }, []);\n  return [value, setValue, remove];\n}\n\nexport { useSessionstorageState };","map":{"version":3,"sources":["D:/react/productwebsite/APP/canvas/node_modules/rooks/dist/esm/hooks/useSessionstorageState.js"],"names":["useState","useEffect","useCallback","useRef","getValueFromSessionStorage","key","sessionStorage","storedValue","getItem","JSON","parse","error","console","saveValueToSessionStorage","value","setItem","stringify","initialize","initialState","valueLoadedFromSessionStorage","useSessionstorageState","_a","__setValue","isUpdateFromListener","current","listen","e","storageArea","newValue","log","window","addEventListener","removeEventListener","setValue","remove","removeItem"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback, useRef } from \"react\";\nfunction getValueFromSessionStorage(key) {\n    if (typeof sessionStorage === \"undefined\") {\n        return null;\n    }\n    var storedValue = sessionStorage.getItem(key) || \"null\";\n    try {\n        return JSON.parse(storedValue);\n    }\n    catch (error) {\n        console.error(error);\n    }\n    return storedValue;\n}\nfunction saveValueToSessionStorage(key, value) {\n    if (typeof sessionStorage === \"undefined\") {\n        return null;\n    }\n    return sessionStorage.setItem(key, JSON.stringify(value));\n}\n/**\n * @param key Key of the sessionStorage object\n * @param initialState Default initial value\n */\nfunction initialize(key, initialState) {\n    var valueLoadedFromSessionStorage = getValueFromSessionStorage(key);\n    if (valueLoadedFromSessionStorage === null) {\n        return initialState;\n    }\n    else {\n        return valueLoadedFromSessionStorage;\n    }\n}\n/**\n * useSessionstorageState hook\n * Tracks a value within sessionStorage and updates it\n *\n * @param {string} key - Key of the sessionStorage object\n * @param {any} initialState - Default initial value\n */\nfunction useSessionstorageState(key, initialState) {\n    var _a = useState(function () { return initialize(key, initialState); }), value = _a[0], __setValue = _a[1];\n    var isUpdateFromListener = useRef(false);\n    useEffect(function () {\n        /**\n         * We need to ensure there is no loop of\n         * storage events fired. Hence we are using a ref\n         * to keep track of whether setValue is from another\n         * storage event\n         */\n        if (!isUpdateFromListener.current) {\n            saveValueToSessionStorage(key, value);\n        }\n    }, [value]);\n    var listen = useCallback(function (e) {\n        if (e.storageArea === sessionStorage && e.key === key) {\n            try {\n                isUpdateFromListener.current = true;\n                var newValue = JSON.parse(e.newValue || \"null\");\n                if (value !== newValue) {\n                    __setValue(newValue);\n                }\n            }\n            catch (error) {\n                console.log(error);\n            }\n        }\n    }, [value]);\n    // check for changes across windows\n    useEffect(function () {\n        window.addEventListener(\"storage\", listen);\n        return function () {\n            window.removeEventListener(\"storage\", listen);\n        };\n    }, []);\n    var setValue = useCallback(function (newValue) {\n        isUpdateFromListener.current = false;\n        __setValue(newValue);\n    }, []);\n    var remove = useCallback(function () {\n        sessionStorage.removeItem(key);\n    }, []);\n    return [value, setValue, remove];\n}\nexport { useSessionstorageState };\n"]},"metadata":{},"sourceType":"module"}