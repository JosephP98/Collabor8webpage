{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nvar defaultOptions = {};\n/**\n *\n * useInput Hook\n *\n * Handles an input's value and onChange props internally to\n * make text input creation process easier\n *\n * @param {any} [initialValue=\"\"] Initial value of the input\n * @param {Options} [opts={}] Options object\n * @returns {InputHandler} Input handler with value and onChange\n */\n\nfunction useInput(initialValue, options) {\n  if (initialValue === void 0) {\n    initialValue = \"\";\n  }\n\n  if (options === void 0) {\n    options = defaultOptions;\n  }\n\n  var _a = useState(initialValue),\n      value = _a[0],\n      setValue = _a[1];\n\n  var onChange = useCallback(function (e) {\n    var newValue = e.target.value;\n    var shouldUpdate = true;\n\n    if (typeof options.validate === \"function\") {\n      shouldUpdate = options.validate(newValue, value);\n    }\n\n    if (shouldUpdate) {\n      setValue(newValue);\n    }\n  }, [value]); // sync with default value\n\n  useEffect(function () {\n    setValue(initialValue);\n  }, [initialValue]);\n  var handler = {\n    onChange: onChange,\n    value: value\n  };\n  return handler;\n}\n\nexport { useInput };","map":{"version":3,"sources":["D:/react/productwebsite/APP/canvas/node_modules/rooks/dist/esm/hooks/useInput.js"],"names":["useState","useEffect","useCallback","defaultOptions","useInput","initialValue","options","_a","value","setValue","onChange","e","newValue","target","shouldUpdate","validate","handler"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,IAAIC,cAAc,GAAG,EAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,YAAlB,EAAgCC,OAAhC,EAAyC;AACrC,MAAID,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAAEA,IAAAA,YAAY,GAAG,EAAf;AAAoB;;AACnD,MAAIC,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAGH,cAAV;AAA2B;;AACrD,MAAII,EAAE,GAAGP,QAAQ,CAACK,YAAD,CAAjB;AAAA,MAAiCG,KAAK,GAAGD,EAAE,CAAC,CAAD,CAA3C;AAAA,MAAgDE,QAAQ,GAAGF,EAAE,CAAC,CAAD,CAA7D;;AACA,MAAIG,QAAQ,GAAGR,WAAW,CAAC,UAAUS,CAAV,EAAa;AACpC,QAAIC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASL,KAAxB;AACA,QAAIM,YAAY,GAAG,IAAnB;;AACA,QAAI,OAAOR,OAAO,CAACS,QAAf,KAA4B,UAAhC,EAA4C;AACxCD,MAAAA,YAAY,GAAGR,OAAO,CAACS,QAAR,CAAiBH,QAAjB,EAA2BJ,KAA3B,CAAf;AACH;;AACD,QAAIM,YAAJ,EAAkB;AACdL,MAAAA,QAAQ,CAACG,QAAD,CAAR;AACH;AACJ,GATyB,EASvB,CAACJ,KAAD,CATuB,CAA1B,CAJqC,CAcrC;;AACAP,EAAAA,SAAS,CAAC,YAAY;AAClBQ,IAAAA,QAAQ,CAACJ,YAAD,CAAR;AACH,GAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;AAGA,MAAIW,OAAO,GAAG;AACVN,IAAAA,QAAQ,EAAEA,QADA;AAEVF,IAAAA,KAAK,EAAEA;AAFG,GAAd;AAIA,SAAOQ,OAAP;AACH;;AACD,SAASZ,QAAT","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nvar defaultOptions = {};\n/**\n *\n * useInput Hook\n *\n * Handles an input's value and onChange props internally to\n * make text input creation process easier\n *\n * @param {any} [initialValue=\"\"] Initial value of the input\n * @param {Options} [opts={}] Options object\n * @returns {InputHandler} Input handler with value and onChange\n */\nfunction useInput(initialValue, options) {\n    if (initialValue === void 0) { initialValue = \"\"; }\n    if (options === void 0) { options = defaultOptions; }\n    var _a = useState(initialValue), value = _a[0], setValue = _a[1];\n    var onChange = useCallback(function (e) {\n        var newValue = e.target.value;\n        var shouldUpdate = true;\n        if (typeof options.validate === \"function\") {\n            shouldUpdate = options.validate(newValue, value);\n        }\n        if (shouldUpdate) {\n            setValue(newValue);\n        }\n    }, [value]);\n    // sync with default value\n    useEffect(function () {\n        setValue(initialValue);\n    }, [initialValue]);\n    var handler = {\n        onChange: onChange,\n        value: value,\n    };\n    return handler;\n}\nexport { useInput };\n"]},"metadata":{},"sourceType":"module"}