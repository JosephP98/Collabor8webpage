{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useEffect, useReducer, useCallback } from \"react\";\nimport { useWarningOnMountInDevelopment } from \"./useWarningOnMountInDevelopment\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"set\":\n      return action.payload;\n\n    default:\n      return state;\n  }\n}\n/**\n * useSessionstorage\n * Tracks a value within sessionStorage and updates it\n *\n * @param key Key of the value to be stored\n * @param defaultValue Default value of the stored item\n */\n\n\nfunction useSessionstorage(key, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = null;\n  }\n\n  useWarningOnMountInDevelopment(\"useSessionstorage is deprecated, it will be removed in rooks v7. Please use useSessionstorageState instead.\");\n\n  var _a = useReducer(reducer, getValueFromSessionStorage()),\n      value = _a[0],\n      dispatch = _a[1];\n\n  function init() {\n    var initialValue = getValueFromSessionStorage();\n\n    if (initialValue === null || initialValue === \"null\") {\n      set(defaultValue);\n    }\n  }\n\n  function getValueFromSessionStorage() {\n    if (typeof sessionStorage === \"undefined\") {\n      return null;\n    }\n\n    var storedValue = sessionStorage.getItem(key) || \"null\";\n\n    try {\n      return JSON.parse(storedValue);\n    } catch (error) {\n      console.error(error);\n    }\n\n    return storedValue;\n  }\n\n  function saveValueToSessionStorage(valueToSet) {\n    if (typeof sessionStorage === \"undefined\") {\n      return null;\n    }\n\n    return sessionStorage.setItem(key, JSON.stringify(valueToSet));\n  }\n\n  function setValue(valueToSet) {\n    dispatch({\n      payload: valueToSet,\n      type: \"set\"\n    });\n  }\n\n  function set(newValue) {\n    saveValueToSessionStorage(newValue);\n    setValue(newValue);\n  } // eslint-disable-next-line consistent-return\n\n\n  function remove() {\n    if (typeof sessionStorage === \"undefined\") {\n      return null;\n    }\n\n    sessionStorage.removeItem(key);\n    setValue(null);\n  }\n\n  useEffect(function () {\n    init();\n  }, []);\n  var listen = useCallback(function (event) {\n    if (event.storageArea === sessionStorage && event.key === key) {\n      set(event.newValue);\n    }\n  }, []);\n  useEffect(function () {\n    window.addEventListener(\"storage\", listen);\n    return function () {\n      window.removeEventListener(\"storage\", listen);\n    };\n  }, []);\n  var handler = Object.assign([value, set, remove], {\n    remove: remove,\n    set: set,\n    value: value\n  });\n  return handler;\n}\n\nexport { useSessionstorage };","map":{"version":3,"sources":["D:/react/productwebsite/APP/canvas/node_modules/rooks/dist/esm/hooks/useSessionstorage.js"],"names":["useEffect","useReducer","useCallback","useWarningOnMountInDevelopment","reducer","state","action","type","payload","useSessionstorage","key","defaultValue","_a","getValueFromSessionStorage","value","dispatch","init","initialValue","set","sessionStorage","storedValue","getItem","JSON","parse","error","console","saveValueToSessionStorage","valueToSet","setItem","stringify","setValue","newValue","remove","removeItem","listen","event","storageArea","window","addEventListener","removeEventListener","handler","Object","assign"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useEffect, useReducer, useCallback } from \"react\";\nimport { useWarningOnMountInDevelopment } from \"./useWarningOnMountInDevelopment\";\nfunction reducer(state, action) {\n    switch (action.type) {\n        case \"set\":\n            return action.payload;\n        default:\n            return state;\n    }\n}\n/**\n * useSessionstorage\n * Tracks a value within sessionStorage and updates it\n *\n * @param key Key of the value to be stored\n * @param defaultValue Default value of the stored item\n */\nfunction useSessionstorage(key, defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    useWarningOnMountInDevelopment(\"useSessionstorage is deprecated, it will be removed in rooks v7. Please use useSessionstorageState instead.\");\n    var _a = useReducer(reducer, getValueFromSessionStorage()), value = _a[0], dispatch = _a[1];\n    function init() {\n        var initialValue = getValueFromSessionStorage();\n        if (initialValue === null || initialValue === \"null\") {\n            set(defaultValue);\n        }\n    }\n    function getValueFromSessionStorage() {\n        if (typeof sessionStorage === \"undefined\") {\n            return null;\n        }\n        var storedValue = sessionStorage.getItem(key) || \"null\";\n        try {\n            return JSON.parse(storedValue);\n        }\n        catch (error) {\n            console.error(error);\n        }\n        return storedValue;\n    }\n    function saveValueToSessionStorage(valueToSet) {\n        if (typeof sessionStorage === \"undefined\") {\n            return null;\n        }\n        return sessionStorage.setItem(key, JSON.stringify(valueToSet));\n    }\n    function setValue(valueToSet) {\n        dispatch({\n            payload: valueToSet,\n            type: \"set\",\n        });\n    }\n    function set(newValue) {\n        saveValueToSessionStorage(newValue);\n        setValue(newValue);\n    }\n    // eslint-disable-next-line consistent-return\n    function remove() {\n        if (typeof sessionStorage === \"undefined\") {\n            return null;\n        }\n        sessionStorage.removeItem(key);\n        setValue(null);\n    }\n    useEffect(function () {\n        init();\n    }, []);\n    var listen = useCallback(function (event) {\n        if (event.storageArea === sessionStorage && event.key === key) {\n            set(event.newValue);\n        }\n    }, []);\n    useEffect(function () {\n        window.addEventListener(\"storage\", listen);\n        return function () {\n            window.removeEventListener(\"storage\", listen);\n        };\n    }, []);\n    var handler = Object.assign([value, set, remove], {\n        remove: remove,\n        set: set,\n        value: value,\n    });\n    return handler;\n}\nexport { useSessionstorage };\n"]},"metadata":{},"sourceType":"module"}