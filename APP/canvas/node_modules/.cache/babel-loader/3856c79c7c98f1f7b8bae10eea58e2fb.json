{"ast":null,"code":"import { useEffect } from \"react\";\nimport { useFreshTick } from \"./useFreshTick\";\nimport { useIsomorphicEffect } from \"./useIsomorphicEffect\";\n/**\n *  useGlobalObjectEventListener hook\n *\n *  A react hook to an event listener to a global object\n *\n * @param {Window|Document} globalObject The global object to add event onto\n * @param {string} eventName The event to track\n * @param {Function} callback The callback to be called on event\n * @param {object} conditions The options to be passed to the event listener\n * @param {boolean} when Should the event listener be active\n * @param {boolean} isLayoutEffect Should it use layout effect. Defaults to false\n * @returns {undefined}\n */\n\nfunction useGlobalObjectEventListener(globalObject, eventName, callback, listenerOptions, when, isLayoutEffect) {\n  if (listenerOptions === void 0) {\n    listenerOptions = {};\n  }\n\n  if (when === void 0) {\n    when = true;\n  }\n\n  if (isLayoutEffect === void 0) {\n    isLayoutEffect = false;\n  }\n\n  var freshCallback = useFreshTick(callback);\n  var capture = listenerOptions.capture,\n      passive = listenerOptions.passive,\n      once = listenerOptions.once;\n  var useEffectToRun = isLayoutEffect ? useIsomorphicEffect : useEffect;\n  useEffectToRun(function () {\n    if (typeof globalObject !== \"undefined\" && globalObject.addEventListener && when) {\n      globalObject.addEventListener(eventName, freshCallback, listenerOptions);\n      return function () {\n        globalObject.removeEventListener(eventName, freshCallback, listenerOptions);\n      };\n    }\n  }, [eventName, capture, passive, once]);\n}\n\nexport { useGlobalObjectEventListener };","map":{"version":3,"sources":["D:/react/productwebsite/APP/canvas/node_modules/rooks/dist/esm/hooks/useGlobalObjectEventListener.js"],"names":["useEffect","useFreshTick","useIsomorphicEffect","useGlobalObjectEventListener","globalObject","eventName","callback","listenerOptions","when","isLayoutEffect","freshCallback","capture","passive","once","useEffectToRun","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,4BAAT,CAAsCC,YAAtC,EAAoDC,SAApD,EAA+DC,QAA/D,EAAyEC,eAAzE,EAA0FC,IAA1F,EAAgGC,cAAhG,EAAgH;AAC5G,MAAIF,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAAEA,IAAAA,eAAe,GAAG,EAAlB;AAAuB;;AACzD,MAAIC,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,IAAP;AAAc;;AACrC,MAAIC,cAAc,KAAK,KAAK,CAA5B,EAA+B;AAAEA,IAAAA,cAAc,GAAG,KAAjB;AAAyB;;AAC1D,MAAIC,aAAa,GAAGT,YAAY,CAACK,QAAD,CAAhC;AACA,MAAIK,OAAO,GAAGJ,eAAe,CAACI,OAA9B;AAAA,MAAuCC,OAAO,GAAGL,eAAe,CAACK,OAAjE;AAAA,MAA0EC,IAAI,GAAGN,eAAe,CAACM,IAAjG;AACA,MAAIC,cAAc,GAAGL,cAAc,GAAGP,mBAAH,GAAyBF,SAA5D;AACAc,EAAAA,cAAc,CAAC,YAAY;AACvB,QAAI,OAAOV,YAAP,KAAwB,WAAxB,IACAA,YAAY,CAACW,gBADb,IAEAP,IAFJ,EAEU;AACNJ,MAAAA,YAAY,CAACW,gBAAb,CAA8BV,SAA9B,EAAyCK,aAAzC,EAAwDH,eAAxD;AACA,aAAO,YAAY;AACfH,QAAAA,YAAY,CAACY,mBAAb,CAAiCX,SAAjC,EAA4CK,aAA5C,EAA2DH,eAA3D;AACH,OAFD;AAGH;AACJ,GATa,EASX,CAACF,SAAD,EAAYM,OAAZ,EAAqBC,OAArB,EAA8BC,IAA9B,CATW,CAAd;AAUH;;AACD,SAASV,4BAAT","sourcesContent":["import { useEffect } from \"react\";\nimport { useFreshTick } from \"./useFreshTick\";\nimport { useIsomorphicEffect } from \"./useIsomorphicEffect\";\n/**\n *  useGlobalObjectEventListener hook\n *\n *  A react hook to an event listener to a global object\n *\n * @param {Window|Document} globalObject The global object to add event onto\n * @param {string} eventName The event to track\n * @param {Function} callback The callback to be called on event\n * @param {object} conditions The options to be passed to the event listener\n * @param {boolean} when Should the event listener be active\n * @param {boolean} isLayoutEffect Should it use layout effect. Defaults to false\n * @returns {undefined}\n */\nfunction useGlobalObjectEventListener(globalObject, eventName, callback, listenerOptions, when, isLayoutEffect) {\n    if (listenerOptions === void 0) { listenerOptions = {}; }\n    if (when === void 0) { when = true; }\n    if (isLayoutEffect === void 0) { isLayoutEffect = false; }\n    var freshCallback = useFreshTick(callback);\n    var capture = listenerOptions.capture, passive = listenerOptions.passive, once = listenerOptions.once;\n    var useEffectToRun = isLayoutEffect ? useIsomorphicEffect : useEffect;\n    useEffectToRun(function () {\n        if (typeof globalObject !== \"undefined\" &&\n            globalObject.addEventListener &&\n            when) {\n            globalObject.addEventListener(eventName, freshCallback, listenerOptions);\n            return function () {\n                globalObject.removeEventListener(eventName, freshCallback, listenerOptions);\n            };\n        }\n    }, [eventName, capture, passive, once]);\n}\nexport { useGlobalObjectEventListener };\n"]},"metadata":{},"sourceType":"module"}