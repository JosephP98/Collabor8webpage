{"ast":null,"code":"import { useEffect, useCallback, useRef, useMemo } from 'react';\nimport { doesIdentifierMatchKeyboardEvent } from '../utils/doesIdentifierMatchKeyboardEvent';\nvar defaultOptions = {\n  eventTypes: ['keydown'],\n  when: true\n};\n/**\n * useKey hook\n *\n * Fires a callback on keyboard events like keyDown, keyPress and keyUp\n *\n * @param {[string|number]} keyList\n * @param {Function} callback\n * @param {Options} options\n */\n\nfunction useKey(input, callback, options_) {\n  var keyList = useMemo(function () {\n    if (Array.isArray(input)) {\n      return input;\n    } else {\n      return [input];\n    }\n  }, [input]);\n  var options = Object.assign({}, defaultOptions, options_);\n  var when = options.when,\n      eventTypes = options.eventTypes;\n  var callbackRef = useRef(callback);\n  var target = options.target;\n  useEffect(function () {\n    callbackRef.current = callback;\n  });\n  var handle = useCallback(function (e) {\n    if (keyList.some(function (identifier) {\n      return doesIdentifierMatchKeyboardEvent(e, identifier);\n    })) {\n      callbackRef.current(e);\n    }\n  }, [keyList]);\n  useEffect(function () {\n    if (when && typeof window !== 'undefined') {\n      var targetNode_1 = target ? target.current : window;\n      eventTypes.forEach(function (eventType) {\n        targetNode_1 && targetNode_1.addEventListener(eventType, handle);\n      });\n      return function () {\n        eventTypes.forEach(function (eventType) {\n          targetNode_1 && targetNode_1.removeEventListener(eventType, handle);\n        });\n      };\n    }\n  }, [when, eventTypes, keyList, target, callback]);\n}\n\nexport { useKey };","map":{"version":3,"sources":["D:/react/productwebsite/APP/canvas/node_modules/rooks/dist/esm/hooks/useKey.js"],"names":["useEffect","useCallback","useRef","useMemo","doesIdentifierMatchKeyboardEvent","defaultOptions","eventTypes","when","useKey","input","callback","options_","keyList","Array","isArray","options","Object","assign","callbackRef","target","current","handle","e","some","identifier","window","targetNode_1","forEach","eventType","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,MAAjC,EAAyCC,OAAzC,QAAwD,OAAxD;AACA,SAASC,gCAAT,QAAiD,2CAAjD;AACA,IAAIC,cAAc,GAAG;AACjBC,EAAAA,UAAU,EAAE,CAAC,SAAD,CADK;AAEjBC,EAAAA,IAAI,EAAE;AAFW,CAArB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,QAAvB,EAAiCC,QAAjC,EAA2C;AACvC,MAAIC,OAAO,GAAGT,OAAO,CAAC,YAAY;AAC9B,QAAIU,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;AACtB,aAAOA,KAAP;AACH,KAFD,MAGK;AACD,aAAO,CAACA,KAAD,CAAP;AACH;AACJ,GAPoB,EAOlB,CAACA,KAAD,CAPkB,CAArB;AAQA,MAAIM,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,cAAlB,EAAkCM,QAAlC,CAAd;AACA,MAAIJ,IAAI,GAAGQ,OAAO,CAACR,IAAnB;AAAA,MAAyBD,UAAU,GAAGS,OAAO,CAACT,UAA9C;AACA,MAAIY,WAAW,GAAGhB,MAAM,CAACQ,QAAD,CAAxB;AACA,MAAIS,MAAM,GAAGJ,OAAO,CAACI,MAArB;AACAnB,EAAAA,SAAS,CAAC,YAAY;AAClBkB,IAAAA,WAAW,CAACE,OAAZ,GAAsBV,QAAtB;AACH,GAFQ,CAAT;AAGA,MAAIW,MAAM,GAAGpB,WAAW,CAAC,UAAUqB,CAAV,EAAa;AAClC,QAAIV,OAAO,CAACW,IAAR,CAAa,UAAUC,UAAV,EAAsB;AACnC,aAAOpB,gCAAgC,CAACkB,CAAD,EAAIE,UAAJ,CAAvC;AACH,KAFG,CAAJ,EAEI;AACAN,MAAAA,WAAW,CAACE,OAAZ,CAAoBE,CAApB;AACH;AACJ,GANuB,EAMrB,CAACV,OAAD,CANqB,CAAxB;AAOAZ,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIO,IAAI,IAAI,OAAOkB,MAAP,KAAkB,WAA9B,EAA2C;AACvC,UAAIC,YAAY,GAAGP,MAAM,GAAGA,MAAM,CAACC,OAAV,GAAoBK,MAA7C;AACAnB,MAAAA,UAAU,CAACqB,OAAX,CAAmB,UAAUC,SAAV,EAAqB;AACpCF,QAAAA,YAAY,IAAIA,YAAY,CAACG,gBAAb,CAA8BD,SAA9B,EAAyCP,MAAzC,CAAhB;AACH,OAFD;AAGA,aAAO,YAAY;AACff,QAAAA,UAAU,CAACqB,OAAX,CAAmB,UAAUC,SAAV,EAAqB;AACpCF,UAAAA,YAAY,IAAIA,YAAY,CAACI,mBAAb,CAAiCF,SAAjC,EAA4CP,MAA5C,CAAhB;AACH,SAFD;AAGH,OAJD;AAKH;AACJ,GAZQ,EAYN,CAACd,IAAD,EAAOD,UAAP,EAAmBM,OAAnB,EAA4BO,MAA5B,EAAoCT,QAApC,CAZM,CAAT;AAaH;;AACD,SAASF,MAAT","sourcesContent":["import { useEffect, useCallback, useRef, useMemo } from 'react';\nimport { doesIdentifierMatchKeyboardEvent } from '../utils/doesIdentifierMatchKeyboardEvent';\nvar defaultOptions = {\n    eventTypes: ['keydown'],\n    when: true,\n};\n/**\n * useKey hook\n *\n * Fires a callback on keyboard events like keyDown, keyPress and keyUp\n *\n * @param {[string|number]} keyList\n * @param {Function} callback\n * @param {Options} options\n */\nfunction useKey(input, callback, options_) {\n    var keyList = useMemo(function () {\n        if (Array.isArray(input)) {\n            return input;\n        }\n        else {\n            return [input];\n        }\n    }, [input]);\n    var options = Object.assign({}, defaultOptions, options_);\n    var when = options.when, eventTypes = options.eventTypes;\n    var callbackRef = useRef(callback);\n    var target = options.target;\n    useEffect(function () {\n        callbackRef.current = callback;\n    });\n    var handle = useCallback(function (e) {\n        if (keyList.some(function (identifier) {\n            return doesIdentifierMatchKeyboardEvent(e, identifier);\n        })) {\n            callbackRef.current(e);\n        }\n    }, [keyList]);\n    useEffect(function () {\n        if (when && typeof window !== 'undefined') {\n            var targetNode_1 = target ? target.current : window;\n            eventTypes.forEach(function (eventType) {\n                targetNode_1 && targetNode_1.addEventListener(eventType, handle);\n            });\n            return function () {\n                eventTypes.forEach(function (eventType) {\n                    targetNode_1 && targetNode_1.removeEventListener(eventType, handle);\n                });\n            };\n        }\n    }, [when, eventTypes, keyList, target, callback]);\n}\nexport { useKey };\n"]},"metadata":{},"sourceType":"module"}