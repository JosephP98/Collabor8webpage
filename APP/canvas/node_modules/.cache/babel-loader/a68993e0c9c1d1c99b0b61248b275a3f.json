{"ast":null,"code":"import { useEffect } from \"react\";\nvar config = {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true\n};\n/**\n *\n * useMutationObserver hook\n *\n * Returns a mutation observer for a React Ref and fires a callback\n *\n * @param {MutableRefObject<HTMLElement | null>} ref React ref on which mutations are to be observed\n * @param {MutationCallback} callback Function that needs to be fired on mutation\n * @param {MutationObserverInit} options\n */\n\nfunction useMutationObserver(ref, callback, options) {\n  if (options === void 0) {\n    options = config;\n  }\n\n  useEffect(function () {\n    // Create an observer instance linked to the callback function\n    if (ref.current) {\n      var observer_1 = new MutationObserver(callback); // Start observing the target node for configured mutations\n\n      observer_1.observe(ref.current, options);\n      return function () {\n        observer_1.disconnect();\n      };\n    }\n  }, [callback, options]);\n}\n\nexport { useMutationObserver };","map":{"version":3,"sources":["D:/react/productwebsite/APP/canvas/node_modules/rooks/dist/esm/hooks/useMutationObserver.js"],"names":["useEffect","config","attributes","characterData","childList","subtree","useMutationObserver","ref","callback","options","current","observer_1","MutationObserver","observe","disconnect"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,IAAIC,MAAM,GAAG;AACTC,EAAAA,UAAU,EAAE,IADH;AAETC,EAAAA,aAAa,EAAE,IAFN;AAGTC,EAAAA,SAAS,EAAE,IAHF;AAITC,EAAAA,OAAO,EAAE;AAJA,CAAb;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,mBAAT,CAA6BC,GAA7B,EAAkCC,QAAlC,EAA4CC,OAA5C,EAAqD;AACjD,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAGR,MAAV;AAAmB;;AAC7CD,EAAAA,SAAS,CAAC,YAAY;AAClB;AACA,QAAIO,GAAG,CAACG,OAAR,EAAiB;AACb,UAAIC,UAAU,GAAG,IAAIC,gBAAJ,CAAqBJ,QAArB,CAAjB,CADa,CAEb;;AACAG,MAAAA,UAAU,CAACE,OAAX,CAAmBN,GAAG,CAACG,OAAvB,EAAgCD,OAAhC;AACA,aAAO,YAAY;AACfE,QAAAA,UAAU,CAACG,UAAX;AACH,OAFD;AAGH;AACJ,GAVQ,EAUN,CAACN,QAAD,EAAWC,OAAX,CAVM,CAAT;AAWH;;AACD,SAASH,mBAAT","sourcesContent":["import { useEffect } from \"react\";\nvar config = {\n    attributes: true,\n    characterData: true,\n    childList: true,\n    subtree: true,\n};\n/**\n *\n * useMutationObserver hook\n *\n * Returns a mutation observer for a React Ref and fires a callback\n *\n * @param {MutableRefObject<HTMLElement | null>} ref React ref on which mutations are to be observed\n * @param {MutationCallback} callback Function that needs to be fired on mutation\n * @param {MutationObserverInit} options\n */\nfunction useMutationObserver(ref, callback, options) {\n    if (options === void 0) { options = config; }\n    useEffect(function () {\n        // Create an observer instance linked to the callback function\n        if (ref.current) {\n            var observer_1 = new MutationObserver(callback);\n            // Start observing the target node for configured mutations\n            observer_1.observe(ref.current, options);\n            return function () {\n                observer_1.disconnect();\n            };\n        }\n    }, [callback, options]);\n}\nexport { useMutationObserver };\n"]},"metadata":{},"sourceType":"module"}