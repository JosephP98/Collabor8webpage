{"ast":null,"code":"import { useState, useEffect, useCallback, useRef } from \"react\";\n\nfunction getValueFromLocalStorage(key) {\n  if (typeof localStorage === \"undefined\") {\n    return null;\n  }\n\n  var storedValue = localStorage.getItem(key) || \"null\";\n\n  try {\n    return JSON.parse(storedValue);\n  } catch (error) {\n    console.error(error);\n  }\n\n  return storedValue;\n}\n\nfunction saveValueToLocalStorage(key, value) {\n  if (typeof localStorage === \"undefined\") {\n    return null;\n  }\n\n  return localStorage.setItem(key, JSON.stringify(value));\n}\n/**\n * @param key Key of the localStorage object\n * @param initialState Default initial value\n */\n\n\nfunction initialize(key, initialState) {\n  var valueLoadedFromLocalStorage = getValueFromLocalStorage(key);\n\n  if (valueLoadedFromLocalStorage === null) {\n    return initialState;\n  } else {\n    return valueLoadedFromLocalStorage;\n  }\n}\n/**\n * useLocalstorageState hook\n * Tracks a value within localStorage and updates it\n *\n * @param {string} key - Key of the localStorage object\n * @param {any} initialState - Default initial value\n */\n\n\nfunction useLocalstorageState(key, initialState) {\n  var _a = useState(function () {\n    return initialize(key, initialState);\n  }),\n      value = _a[0],\n      __setValue = _a[1];\n\n  var isUpdateFromListener = useRef(false);\n  useEffect(function () {\n    /**\n     * We need to ensure there is no loop of\n     * storage events fired. Hence we are using a ref\n     * to keep track of whether setValue is from another\n     * storage event\n     */\n    if (!isUpdateFromListener.current) {\n      saveValueToLocalStorage(key, value);\n    }\n  }, [value]);\n  var listen = useCallback(function (e) {\n    if (e.storageArea === localStorage && e.key === key) {\n      try {\n        isUpdateFromListener.current = true;\n        var newValue = JSON.parse(e.newValue || \"null\");\n\n        if (value !== newValue) {\n          __setValue(newValue);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, []); // check for changes across windows\n\n  useEffect(function () {\n    window.addEventListener(\"storage\", listen);\n    return function () {\n      window.removeEventListener(\"storage\", listen);\n    };\n  }, []);\n  var setValue = useCallback(function (newValue) {\n    isUpdateFromListener.current = false;\n\n    __setValue(newValue);\n  }, []);\n  var remove = useCallback(function () {\n    localStorage.removeItem(key);\n  }, []);\n  return [value, setValue, remove];\n}\n\nexport { useLocalstorageState };","map":{"version":3,"sources":["D:/react/productwebsite/APP/canvas/node_modules/rooks/dist/esm/hooks/useLocalstorageState.js"],"names":["useState","useEffect","useCallback","useRef","getValueFromLocalStorage","key","localStorage","storedValue","getItem","JSON","parse","error","console","saveValueToLocalStorage","value","setItem","stringify","initialize","initialState","valueLoadedFromLocalStorage","useLocalstorageState","_a","__setValue","isUpdateFromListener","current","listen","e","storageArea","newValue","log","window","addEventListener","removeEventListener","setValue","remove","removeItem"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback, useRef } from \"react\";\nfunction getValueFromLocalStorage(key) {\n    if (typeof localStorage === \"undefined\") {\n        return null;\n    }\n    var storedValue = localStorage.getItem(key) || \"null\";\n    try {\n        return JSON.parse(storedValue);\n    }\n    catch (error) {\n        console.error(error);\n    }\n    return storedValue;\n}\nfunction saveValueToLocalStorage(key, value) {\n    if (typeof localStorage === \"undefined\") {\n        return null;\n    }\n    return localStorage.setItem(key, JSON.stringify(value));\n}\n/**\n * @param key Key of the localStorage object\n * @param initialState Default initial value\n */\nfunction initialize(key, initialState) {\n    var valueLoadedFromLocalStorage = getValueFromLocalStorage(key);\n    if (valueLoadedFromLocalStorage === null) {\n        return initialState;\n    }\n    else {\n        return valueLoadedFromLocalStorage;\n    }\n}\n/**\n * useLocalstorageState hook\n * Tracks a value within localStorage and updates it\n *\n * @param {string} key - Key of the localStorage object\n * @param {any} initialState - Default initial value\n */\nfunction useLocalstorageState(key, initialState) {\n    var _a = useState(function () { return initialize(key, initialState); }), value = _a[0], __setValue = _a[1];\n    var isUpdateFromListener = useRef(false);\n    useEffect(function () {\n        /**\n         * We need to ensure there is no loop of\n         * storage events fired. Hence we are using a ref\n         * to keep track of whether setValue is from another\n         * storage event\n         */\n        if (!isUpdateFromListener.current) {\n            saveValueToLocalStorage(key, value);\n        }\n    }, [value]);\n    var listen = useCallback(function (e) {\n        if (e.storageArea === localStorage && e.key === key) {\n            try {\n                isUpdateFromListener.current = true;\n                var newValue = JSON.parse(e.newValue || \"null\");\n                if (value !== newValue) {\n                    __setValue(newValue);\n                }\n            }\n            catch (error) {\n                console.log(error);\n            }\n        }\n    }, []);\n    // check for changes across windows\n    useEffect(function () {\n        window.addEventListener(\"storage\", listen);\n        return function () {\n            window.removeEventListener(\"storage\", listen);\n        };\n    }, []);\n    var setValue = useCallback(function (newValue) {\n        isUpdateFromListener.current = false;\n        __setValue(newValue);\n    }, []);\n    var remove = useCallback(function () {\n        localStorage.removeItem(key);\n    }, []);\n    return [value, setValue, remove];\n}\nexport { useLocalstorageState };\n"]},"metadata":{},"sourceType":"module"}