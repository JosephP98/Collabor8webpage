{"ast":null,"code":"import { useCallback, useState } from \"react\";\n/**\n *\n * @typedef handler\n * @type {Object}\n * @property {number} value The value of the counter\n * @property {Function}  increment Increment counter value by 1\n * @property {Function} decrement Decrement counter value by 1\n * @property {Function} incrementBy Increment counter by incrAmount\n * @property {Function} decrementBy Decrement counter by decrAmount\n * @property {Function} reset Reset counter to initialValue\n */\n\n/**\n * Counter hook\n *\n * @param {number} initialValue The initial value of the counter\n * @returns {handler} A handler to interact with the counter\n */\n\nfunction useCounter(initialValue) {\n  var _a = useState(initialValue),\n      counter = _a[0],\n      setCounter = _a[1];\n  /**\n   * Increment counter by an amount\n   *\n   * @param {number} incrAmount\n   */\n\n\n  var incrementBy = useCallback(function (incrAmount) {\n    setCounter(function (currentCounter) {\n      return currentCounter + incrAmount;\n    });\n  }, []);\n  /**\n   *\n   * Decrement counter by an amount\n   *\n   * @param {*} decrAmount\n   */\n\n  var decrementBy = useCallback(function (decrAmount) {\n    incrementBy(-decrAmount);\n  }, []);\n  /**\n   * Increment counter by 1\n   */\n\n  var increment = useCallback(function () {\n    incrementBy(1);\n  }, []);\n  /**\n   * Decrement counter by 1\n   */\n\n  var decrement = useCallback(function () {\n    incrementBy(-1);\n  }, []);\n  /**\n   * Reset counter to initial value\n   */\n\n  var reset = useCallback(function () {\n    setCounter(initialValue);\n  }, []);\n  return {\n    decrement: decrement,\n    decrementBy: decrementBy,\n    increment: increment,\n    incrementBy: incrementBy,\n    reset: reset,\n    value: counter\n  };\n}\n\nexport { useCounter };","map":{"version":3,"sources":["D:/react/productwebsite/APP/canvas/node_modules/rooks/dist/esm/hooks/useCounter.js"],"names":["useCallback","useState","useCounter","initialValue","_a","counter","setCounter","incrementBy","incrAmount","currentCounter","decrementBy","decrAmount","increment","decrement","reset","value"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,YAApB,EAAkC;AAC9B,MAAIC,EAAE,GAAGH,QAAQ,CAACE,YAAD,CAAjB;AAAA,MAAiCE,OAAO,GAAGD,EAAE,CAAC,CAAD,CAA7C;AAAA,MAAkDE,UAAU,GAAGF,EAAE,CAAC,CAAD,CAAjE;AACA;AACJ;AACA;AACA;AACA;;;AACI,MAAIG,WAAW,GAAGP,WAAW,CAAC,UAAUQ,UAAV,EAAsB;AAChDF,IAAAA,UAAU,CAAC,UAAUG,cAAV,EAA0B;AAAE,aAAOA,cAAc,GAAGD,UAAxB;AAAqC,KAAlE,CAAV;AACH,GAF4B,EAE1B,EAF0B,CAA7B;AAGA;AACJ;AACA;AACA;AACA;AACA;;AACI,MAAIE,WAAW,GAAGV,WAAW,CAAC,UAAUW,UAAV,EAAsB;AAChDJ,IAAAA,WAAW,CAAC,CAACI,UAAF,CAAX;AACH,GAF4B,EAE1B,EAF0B,CAA7B;AAGA;AACJ;AACA;;AACI,MAAIC,SAAS,GAAGZ,WAAW,CAAC,YAAY;AACpCO,IAAAA,WAAW,CAAC,CAAD,CAAX;AACH,GAF0B,EAExB,EAFwB,CAA3B;AAGA;AACJ;AACA;;AACI,MAAIM,SAAS,GAAGb,WAAW,CAAC,YAAY;AACpCO,IAAAA,WAAW,CAAC,CAAC,CAAF,CAAX;AACH,GAF0B,EAExB,EAFwB,CAA3B;AAGA;AACJ;AACA;;AACI,MAAIO,KAAK,GAAGd,WAAW,CAAC,YAAY;AAChCM,IAAAA,UAAU,CAACH,YAAD,CAAV;AACH,GAFsB,EAEpB,EAFoB,CAAvB;AAGA,SAAO;AACHU,IAAAA,SAAS,EAAEA,SADR;AAEHH,IAAAA,WAAW,EAAEA,WAFV;AAGHE,IAAAA,SAAS,EAAEA,SAHR;AAIHL,IAAAA,WAAW,EAAEA,WAJV;AAKHO,IAAAA,KAAK,EAAEA,KALJ;AAMHC,IAAAA,KAAK,EAAEV;AANJ,GAAP;AAQH;;AACD,SAASH,UAAT","sourcesContent":["import { useCallback, useState } from \"react\";\n/**\n *\n * @typedef handler\n * @type {Object}\n * @property {number} value The value of the counter\n * @property {Function}  increment Increment counter value by 1\n * @property {Function} decrement Decrement counter value by 1\n * @property {Function} incrementBy Increment counter by incrAmount\n * @property {Function} decrementBy Decrement counter by decrAmount\n * @property {Function} reset Reset counter to initialValue\n */\n/**\n * Counter hook\n *\n * @param {number} initialValue The initial value of the counter\n * @returns {handler} A handler to interact with the counter\n */\nfunction useCounter(initialValue) {\n    var _a = useState(initialValue), counter = _a[0], setCounter = _a[1];\n    /**\n     * Increment counter by an amount\n     *\n     * @param {number} incrAmount\n     */\n    var incrementBy = useCallback(function (incrAmount) {\n        setCounter(function (currentCounter) { return currentCounter + incrAmount; });\n    }, []);\n    /**\n     *\n     * Decrement counter by an amount\n     *\n     * @param {*} decrAmount\n     */\n    var decrementBy = useCallback(function (decrAmount) {\n        incrementBy(-decrAmount);\n    }, []);\n    /**\n     * Increment counter by 1\n     */\n    var increment = useCallback(function () {\n        incrementBy(1);\n    }, []);\n    /**\n     * Decrement counter by 1\n     */\n    var decrement = useCallback(function () {\n        incrementBy(-1);\n    }, []);\n    /**\n     * Reset counter to initial value\n     */\n    var reset = useCallback(function () {\n        setCounter(initialValue);\n    }, []);\n    return {\n        decrement: decrement,\n        decrementBy: decrementBy,\n        increment: increment,\n        incrementBy: incrementBy,\n        reset: reset,\n        value: counter,\n    };\n}\nexport { useCounter };\n"]},"metadata":{},"sourceType":"module"}